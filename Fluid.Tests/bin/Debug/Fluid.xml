<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fluid</name>
    </assembly>
    <members>
        <member name="T:Fluid.AccessLevel">
            <summary>
            The list of different levels of priveledges a user can have
            </summary>
        </member>
        <member name="F:Fluid.AccessLevel.None">
            <summary>
            Has no priveledges
            </summary>
        </member>
        <member name="F:Fluid.AccessLevel.Owner">
            <summary>
            Has owner priveledges
            </summary>
        </member>
        <member name="F:Fluid.AccessLevel.Edit">
            <summary>
            Has edit priveledges
            </summary>
        </member>
        <member name="F:Fluid.AccessLevel.Guardian">
            <summary>
            Has kicking and command priveledges
            </summary>
        </member>
        <member name="T:Fluid.IAuth">
            <summary>
            The IAuth interface for different game authentication's
            </summary>
        </member>
        <member name="M:Fluid.IAuth.LogIn(Fluid.Config,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>
            Log's in to the game
            </summary>
            <param name="config">The game configuration</param>
            <param name="clientCallback">The client success callback</param>
            <param name="errorCallback">The playerio error callback</param>
        </member>
        <member name="M:Fluid.Auth.ArmorgamesAuth.GetArmorgamesLoginCookie">
            <summary>
            Log's in to armor games with the username and password provided and gets the login cookie
            </summary>
            <returns>The cookie if a valid session was retrieved; otherwise null</returns>
        </member>
        <member name="M:Fluid.Auth.ArmorgamesAuth.GetFlashvars(System.String)">
            <summary>
            Log's in to everybody edits with the armorgames login cookie
            </summary>
            <param name="loginCookie"></param>
        </member>
        <member name="M:Fluid.Auth.ArmorgamesAuth.LogIn(Fluid.Config,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>
            Log in through armorgames
            </summary>
            <param name="config">The game configuration</param>
            <param name="clientCallback">The client success callback</param>
            <param name="errorCallback">The playerio error callback</param>
        </member>
        <member name="M:Fluid.Auth.ArmorgamesAuth.#ctor(System.String,System.String)">
            <summary>
            Creates a new armorgames authentication
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
        </member>
        <member name="P:Fluid.Auth.ArmorgamesAuth.Username">
            <summary>
            The email
            </summary>
        </member>
        <member name="P:Fluid.Auth.ArmorgamesAuth.Password">
            <summary>
            The password
            </summary>
        </member>
        <member name="M:Fluid.Auth.ArmorgamesFlashvars.#ctor(System.String,System.String)">
            <summary>
            Creates a new armorgames flashvars
            </summary>
            <param name="authToken">The auth token</param>
            <param name="userId">The user id</param>
        </member>
        <member name="P:Fluid.Auth.ArmorgamesFlashvars.AuthToken">
            <summary>
            The auth token
            </summary>
        </member>
        <member name="P:Fluid.Auth.ArmorgamesFlashvars.UserId">
            <summary>
            The user id
            </summary>
        </member>
        <member name="M:Fluid.Auth.FacebookAuth.GetNewFacebookSession">
            <summary>
            Gets a new facebook session
            </summary>
            <returns>A collection of default facebook cookies</returns>
        </member>
        <member name="M:Fluid.Auth.FacebookAuth.GetLoginCookies(System.String,System.String)">
            <summary>
            Gets a collection of authenticated login cookies
            </summary>
            <param name="email">The facebook user email</param>
            <param name="password">The facebook user password</param>
            <returns>A collection of authenticated login cookies</returns>
        </member>
        <member name="M:Fluid.Auth.FacebookAuth.GetAccessToken(System.String,System.String)">
            <summary>
            Gets a facebook access token
            </summary>
            <param name="email">The facebook email</param>
            <param name="password">The facebook password</param>
            <returns>The facebook game access token</returns>
        </member>
        <member name="M:Fluid.Auth.FacebookAuth.LogIn(Fluid.Config,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>
            Log's in through facebook
            </summary>
            <param name="config">The config</param>
            <param name="clientCallback">The client success callback</param>
            <param name="errorCallback">The playerio error callback</param>
        </member>
        <member name="M:Fluid.Auth.FacebookAuth.#ctor(System.String,System.String)">
            <summary>
            Creates a new facebook authentication
            </summary>
            <param name="email">The facebook email</param>
            <param name="password">The facebook password</param>
        </member>
        <member name="P:Fluid.Auth.FacebookAuth.Email">
            <summary>
            Gets or Sets the facebook user email
            </summary>
        </member>
        <member name="P:Fluid.Auth.FacebookAuth.Password">
            <summary>
            Gets or Sets the facebook user password
            </summary>
        </member>
        <member name="M:Fluid.Auth.SimpleAuth.LogIn(Fluid.Config,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>
            Log's In to everybody edits
            </summary>
            <param name="config">The game configuration</param>
            <param name="clientCallback">The client success callback</param>
            <param name="errorCallback">The playerio error callback</param>
        </member>
        <member name="M:Fluid.Auth.SimpleAuth.#ctor(System.String,System.String)">
            <summary>
            Simple authentication
            </summary>
            <param name="email">The email</param>
            <param name="password">The password</param>
        </member>
        <member name="P:Fluid.Auth.SimpleAuth.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="P:Fluid.Auth.SimpleAuth.Password">
            <summary>
            The password
            </summary>
        </member>
        <member name="M:Fluid.Auth.GuestAuth.#ctor">
            <summary>
            Guest authentication
            </summary>
        </member>
        <member name="M:Fluid.Auth.Implementation.MousebreakerLogin.GetUserLogin(Fluid.Config,System.Int32)">
            <summary>
            Opens the mousebreaker website and lets the user log in
            </summary>
            <param name="config">The configuration</param>
            <param name="timeout">The timeout in milliseconds</param>
        </member>
        <member name="M:Fluid.Auth.KongregateAuth.GetNewKongregateSession">
            <summary>
            Gets a unique kongregate authenitcity token
            </summary>
        </member>
        <member name="M:Fluid.Auth.KongregateAuth.LoginToKongregate(Fluid.Auth.KongregateSession)">
            <summary>
            Logs In to kongregate with a basic kongregate session and upgrades the session
            </summary>
            <param name="kongSession">The basic kongregate session</param>
            <returns></returns>
        </member>
        <member name="M:Fluid.Auth.KongregateAuth.GetPlayerObject(Fluid.Auth.KongregateSession)">
            <summary>
            Gets the player object
            </summary>
            <param name="loginSession">The logged in session</param>
        </member>
        <member name="M:Fluid.Auth.KongregateAuth.LogIn(Fluid.Config,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>
            Log in through kongregate
            </summary>
            <param name="config">The config</param>
            <param name="clientCallback">The client success callback</param>
            <param name="errorCallback">The playerio error callback</param>
        </member>
        <member name="M:Fluid.Auth.KongregateAuth.#ctor(System.String,System.String)">
            <summary>
            Creates a new kongregate authentication
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
        </member>
        <member name="M:Fluid.Auth.KongregatePlayerObject.#ctor(System.String,System.String)">
            <summary>
            Creates a new kongregate player object
            </summary>
        </member>
        <member name="P:Fluid.Auth.KongregatePlayerObject.UserID">
            <summary>
            Gets the user identification
            </summary>
        </member>
        <member name="P:Fluid.Auth.KongregatePlayerObject.GameAuthToken">
            <summary>
            Gets the game authentication token
            </summary>
        </member>
        <member name="M:Fluid.Auth.KongregateSession.IsAuthenticated">
            <summary>
            Checks if the session is authenticated
            </summary>
        </member>
        <member name="M:Fluid.Auth.KongregateSession.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new kongregate session
            </summary>
            <param name="authenticityToken">The authenticity token</param>
            <param name="kongSvid">The kongregate svid</param>
            <param name="sessionToken">The session token</param>
        </member>
        <member name="P:Fluid.Auth.KongregateSession.AuthenticityToken">
            <summary>
            Gets the authenticity token
            </summary>
        </member>
        <member name="P:Fluid.Auth.KongregateSession.KongSvid">
            <summary>
            Gets or Sets the kong svid
            </summary>
        </member>
        <member name="P:Fluid.Auth.KongregateSession.SessionToken">
            <summary>
            Gets or Sets the session token
            </summary>
        </member>
        <member name="P:Fluid.Auth.KongregateSession.WWWPass">
            <summary>
            Gets or Sets the WWW Password
            </summary>
        </member>
        <member name="P:Fluid.Auth.MousebreakerApiData.MBuid">
            <summary>
            Gets the MBuid
            </summary>
        </member>
        <member name="P:Fluid.Auth.MousebreakerApiData.MAuth">
            <summary>
            Gets the MAuth
            </summary>
        </member>
        <member name="M:Fluid.Auth.MousebreakerAuth.GetAPIRequest">
            <summary>
            Gets a playerio implementation request
            </summary>
        </member>
        <member name="M:Fluid.Auth.MousebreakerAuth.LogIn(Fluid.Config,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>
            Logs in with mouse breaker
            </summary>
            <param name="config">The config</param>
            <param name="clientCallback">The client success callback</param>
            <param name="errorCallback">The playerio error callback</param>
        </member>
        <member name="M:Fluid.Auth.MousebreakerAuth.#ctor(System.String)">
            <summary>
            Creates a new mousebreaker authentication
            </summary>
            <param name="token">The token</param>
        </member>
        <member name="P:Fluid.Auth.MousebreakerAuth.Token">
            <summary>
            Gets or Sets the token
            </summary>
        </member>
        <member name="M:Fluid.BlockImage.ValidPixel(System.Int32,System.Int32)">
            <summary>
            Checks if the x and y location is a valid pixel
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <returns>True if value; otherwise false</returns>
        </member>
        <member name="M:Fluid.BlockImage.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets a pixel at a x and y coordinate
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <returns>The color of the block at the coordinate</returns>
        </member>
        <member name="P:Fluid.BlockImage.Width">
            <summary>
            Gets the block image's width
            </summary>
        </member>
        <member name="P:Fluid.BlockImage.Height">
            <summary>
            Gets the block image's height
            </summary>
        </member>
        <member name="P:Fluid.BlockImage.Values">
            <summary>
            Gets the color values of the image
            </summary>
        </member>
        <member name="P:Fluid.BlockImage.Image">
            <summary>
            Gets the image as a System.Drawing.Image
            </summary>
        </member>
        <member name="P:Fluid.BlockImage.Item(System.Int32,System.Int32)">
            <summary>
            Gets a pixel at a x and y coordinate
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <returns>The color of the block at the coordinate</returns>
        </member>
        <member name="M:Fluid.BlockRequest.SetMissed">
            <summary>
            Sets the block as missed
            </summary>
        </member>
        <member name="M:Fluid.BlockRequest.GetTimePassed">
            <summary>
            Gets the time since the last request
            </summary>
        </member>
        <member name="M:Fluid.BlockRequest.Request">
            <summary>
            Sets the last request time to now
            </summary>
        </member>
        <member name="M:Fluid.BlockRequest.#ctor(Fluid.Room.Block,System.Int32)">
            <summary>
            Creates a new block request
            </summary>
            <param name="block">The block to be uploaded</param>
            <param name="blockThrottle">The speed of the block to be uploaded at</param>
        </member>
        <member name="P:Fluid.BlockRequest.Block">
            <summary>
            Gets the block
            </summary>
        </member>
        <member name="P:Fluid.BlockRequest.Timestamp">
            <summary>
            Gets the request timestamp
            </summary>
        </member>
        <member name="P:Fluid.BlockRequest.BlockThrottle">
            <summary>
            Gets the block throttle
            </summary>
        </member>
        <member name="P:Fluid.BlockRequest.Missed">
            <summary>
            Gets or sets whether the request was missed
            </summary>
        </member>
        <member name="P:Fluid.BlockRequest.HasBeenSent">
            <summary>
            Gets or sets whether the block has been sent
            </summary>
        </member>
        <member name="M:Fluid.ExternalResources.FindFile(System.String)">
            <summary>
            Find's a file in the file system
            </summary>
            <param name="filename">The name of the file to find</param>
            <returns>The file path</returns>
        </member>
        <member name="M:Fluid.Room.Block.Location">
            <summary>
            Gets the location of the block
            </summary>
            <returns>The location of the block</returns>
        </member>
        <member name="M:Fluid.Room.Block.GetMinimapColor">
            <summary>
            Gets the minimap color
            </summary>
            <returns>The minimap color of the block if known; otherwise null</returns>
        </member>
        <member name="M:Fluid.Room.Block.GetImage">
            <summary>
            Gets the block image
            </summary>
            <returns>The image of the block if known; otherwise null</returns>
        </member>
        <member name="M:Fluid.Room.Block.Bind(Fluid.WorldConnection)">
            <summary>
            Binds the block to a connection
            </summary>
            <param name="worldCon">The world connection</param>
        </member>
        <member name="M:Fluid.Room.Block.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.Block.Clone">
            <summary>
            Create's a cloned copy of this block
            </summary>
            <returns>A clone of this block</returns>
        </member>
        <member name="M:Fluid.Room.Block.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Checks if two blocks are the same
            </summary>
            <param name="bl">The block</param>
        </member>
        <member name="M:Fluid.Room.Block.#ctor(Fluid.Room.BlockID,Fluid.Room.Layer,System.Int32,System.Int32)">
            <summary>
            Creates a new world block
            </summary>
            <param name="id">the block ID</param>
            <param name="layer">The layer</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Fluid.Room.Block.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,Fluid.Room.Layer,System.Int32,System.Int32)">
            <summary>
            Creates a new world block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="id">the block ID</param>
            <param name="layer">The layer</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Fluid.Room.Block.GetBlockLayer(Fluid.Room.BlockID)">
            <summary>
            Gets the layer of a block id
            </summary>
            <param name="blockId">The block id</param>
            <returns>The layer of the block</returns>
        </member>
        <member name="M:Fluid.Room.Block.Create(Fluid.Room.BlockID,System.Int32,System.Int32)">
            <summary>
            Creates a default block
            </summary>
            <param name="id">The id of the block</param>
            <param name="x">The block x coordinate</param>
            <param name="y">The block y coordinate</param>
            <returns>The created block</returns>
        </member>
        <member name="M:Fluid.Room.Block.Create(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32)">
            <summary>
            Creates a default block
            </summary>
            <param name="con">The attached world connection</param>
            <param name="id">The id of the block</param>
            <param name="x">The block x coordinate</param>
            <param name="y">The block y coordinate</param>
            <returns>The created block</returns>
        </member>
        <member name="P:Fluid.Room.Block.ID">
            <summary>
            Gets or sets the block's id
            </summary>
        </member>
        <member name="P:Fluid.Room.Block.Layer">
            <summary>
            Gets or sets the block's layer
            </summary>
        </member>
        <member name="P:Fluid.Room.Block.X">
            <summary>
            Gets or sets the block's X Coordinate
            </summary>
        </member>
        <member name="P:Fluid.Room.Block.Y">
            <summary>
            Gets or sets the block's Y Coordinate
            </summary>
        </member>
        <member name="P:Fluid.Room.Block.Placer">
            <summary>
            Gets the block's placer
            </summary>
        </member>
        <member name="P:Fluid.Room.Block.IsBinded">
            <summary>
            Checks if the block is binded to a connection
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockID">
            <summary>
            The block id
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs">
            <summary>
            The list of organized block ids
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks">
            <summary>
            The blocks tab
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Basic">
            <summary>
            The basic block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Gray">
            <summary>
            The gray basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Blue">
            <summary>
            The blue basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Purple">
            <summary>
            The purple basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Red">
            <summary>
            The red basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Orange">
            <summary>
            The orange basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Yellow">
            <summary>
            The yellow basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Green">
            <summary>
            The green basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Turquoise">
            <summary>
            The turquoise basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Basic.Black">
            <summary>
            The black basic block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Beta">
            <summary>
            The beta block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Pink">
            <summary>
            The pink beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Green">
            <summary>
            The green beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Turquoise">
            <summary>
            The turquoise beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Blue">
            <summary>
            The blue beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Red">
            <summary>
            The red beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Orange">
            <summary>
            The orange beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Gold">
            <summary>
            The gold beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Gray">
            <summary>
            The gray beta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Beta.Black">
            <summary>
            The black beta block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Brick">
            <summary>
            The brick block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.Gray">
            <summary>
            The gray brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.DirtBrown">
            <summary>
            The dirt brown brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.Blue">
            <summary>
            The blue brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.DarkGreen">
            <summary>
            The dark green brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.Purple">
            <summary>
            The purple brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.LightGreen">
            <summary>
            The light green brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.Red">
            <summary>
            The red brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.PaleBrown">
            <summary>
            The pale brown brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Brick.Black">
            <summary>
            The black brick block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Metal">
            <summary>
            The metal block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Metal.White">
            <summary>
            The white metal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Metal.RedOrange">
            <summary>
            The red-orange metal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Metal.Yellow">
            <summary>
            The yellow metal block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Grass">
            <summary>
            The grass block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Grass.Left">
            <summary>
            The left facing grass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Grass.Straight">
            <summary>
            The straight grass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Grass.Right">
            <summary>
            The right facing grass block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Special">
            <summary>
            The special block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Special.Hazard">
            <summary>
            The hazard special block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Special.SmileyFace">
            <summary>
            The smiley face special block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Special.BlackGloss">
            <summary>
            The glossy black special block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Special.FullyBlack">
            <summary>
            The fully black special block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Factory">
            <summary>
            The factory block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Factory.MetalCrate">
            <summary>
            The metal crate factory block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Factory.GrayEmboss">
            <summary>
            The gray embossed factory block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Factory.Straw">
            <summary>
            The straw factory block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Factory.WoodCreate">
            <summary>
            The wood create factory block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Factory.MetalScale">
            <summary>
            The metal scaled factory block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Secrets">
            <summary>
            The secrets block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Secrets.UnpassableDark">
            <summary>
            The dark unpassable secret block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Secrets.UnpassableClear">
            <summary>
            The clear unpassable secret block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Secrets.PassableBlack">
            <summary>
            The black passable secret block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Glass">
            <summary>
            The glass block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.Red">
            <summary>
            The red glass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.Pink">
            <summary>
            The pink glass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.Purple">
            <summary>
            The purple glass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.DarkBlue">
            <summary>
            The dark blue glass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.LightBlue">
            <summary>
            The light blue glass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.Green">
            <summary>
            The green glass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.Yellow">
            <summary>
            The yellow glass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Glass.Orange">
            <summary>
            The orange glass block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Minerals">
            <summary>
            The minerals block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Minerals.Red">
            <summary>
            The red mineral block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Minerals.Pink">
            <summary>
            The pink mineral block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Minerals.DarkBlue">
            <summary>
            The dark blue mineral block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Minerals.LightBlue">
            <summary>
            The light blue mineral block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Minerals.Green">
            <summary>
            The green mineral block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Minerals.Yellow">
            <summary>
            The yellow mineral block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Minerals.Orange">
            <summary>
            The orange mineral block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Christmas2011">
            <summary>
            The 2011 christmas block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Christmas2011.Yellow">
            <summary>
            The yellow 2011 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Christmas2011.White">
            <summary>
            The white 2011 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Christmas2011.Red">
            <summary>
            The red 2011 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Christmas2011.Blue">
            <summary>
            The blue 2011 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Christmas2011.Green">
            <summary>
            The green 2011 christmas block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Candy">
            <summary>
            The candy block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.Pink">
            <summary>
            The pink candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.PinkOneWay">
            <summary>
            The pink one way candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.RedOneWay">
            <summary>
            The red one way candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.BlueOneWay">
            <summary>
            The blue one way candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.GreenOneWay">
            <summary>
            The green one way candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.CandyCane">
            <summary>
            The candy cane candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.YellowBlackPink">
            <summary>
            The yellow black pink candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Candy.Chocolate">
            <summary>
            The chocolate candy block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Summer2011">
            <summary>
            The 2011 summer block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Summer2011.Sand">
            <summary>
            The sand 2011 summer block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Halloween2011">
            <summary>
            The 2011 halloween block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Halloween2011.Bloody">
            <summary>
            The bloddy 2011 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Halloween2011.Brick">
            <summary>
            The brick 2011 halloween block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.SciFi">
            <summary>
            The science fiction block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.Red">
            <summary>
            The red sci fi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.Blue">
            <summary>
            The blue sci fi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.Metal">
            <summary>
            The metal sci fi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.White">
            <summary>
            The white sci fi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.Brown">
            <summary>
            The brown sci fi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.RedOneWay">
            <summary>
            The one way red sci fi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.BlueOneWay">
            <summary>
            The one way blue sci fi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.SciFi.GreenOneWay">
            <summary>
            The one way green sci fi block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Prison">
            <summary>
            The prison block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Prison.Brick">
            <summary>
            The prison brick block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Pirate">
            <summary>
            The pirate block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pirate.Wood">
            <summary>
            The wood pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pirate.Chest">
            <summary>
            The treasure chest block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Vikings">
            <summary>
            The viking block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Vikings.Rock">
            <summary>
            The viking rock block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Ninja">
            <summary>
            The ninja block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Ninja.WhiteOneWay">
            <summary>
            The white one way ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Ninja.GrayOneWay">
            <summary>
            The gray one way ninja block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Cowboy">
            <summary>
            The cowboy block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Cowboy.LightBrown">
            <summary>
            The light brown one way cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Cowboy.LightRed">
            <summary>
            The light red one way cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Cowboy.LightBlue">
            <summary>
            The light blue one way cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Cowboy.DarkBrown">
            <summary>
            The dark brown one way cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Cowboy.DarkRed">
            <summary>
            The dark red one way cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Cowboy.DarkBlue">
            <summary>
            The dark blue one way cowboy block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Plastic">
            <summary>
            The plastic block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.NeonGreen">
            <summary>
            The neon green plastic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.Red">
            <summary>
            The red plastic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.Yellow">
            <summary>
            The yellow plastic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.LightBlue">
            <summary>
            The light blue plastic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.DarkBlue">
            <summary>
            The dark blue plastic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.Pink">
            <summary>
            The pink plastic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.DarkGreen">
            <summary>
            The dark green plastic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Plastic.Orange">
            <summary>
            The orange plastic block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Sand">
            <summary>
            The sand block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sand.LightYellow">
            <summary>
            The light yellow sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sand.Gray">
            <summary>
            The gray sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sand.DarkYellow">
            <summary>
            The dark yellow sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sand.Orange">
            <summary>
            The orange sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sand.LightBrown">
            <summary>
            The light brown sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sand.DarkBrown">
            <summary>
            The dark brown sand block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Cloud">
            <summary>
            The cloud block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Cloud.Block">
            <summary>
            The cloud block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.PlateIron">
            <summary>
            The plate iron block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.PlateIron.Tile">
            <summary>
            The tiled iron block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.PlateIron.Wire">
            <summary>
            The wire block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Industrial">
            <summary>
            The industrial block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.IronOneWay">
            <summary>
            The one way iron industrial block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.XSupport">
            <summary>
            The x support industrial block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.LiftSupport">
            <summary>
            The lift support industrial block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.Pole">
            <summary>
            The pole industrial block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.ConveyorLeft">
            <summary>
            The left conveyor belt industrial block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.ConveyorMiddleLeft">
            <summary>
            The middle left conveyor belt industrial block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.ConveyorMiddleRight">
            <summary>
            The middle right conveyor belt industrial block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Industrial.ConveyorRight">
            <summary>
            The right conveyor belt industrial block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Timbered">
            <summary>
            The timbered block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Timbered.OneWay">
            <summary>
            The one way timbered block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Castle">
            <summary>
            The castle block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Castle.OneWay">
            <summary>
            The one way castle block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Castle.Brick">
            <summary>
            The brick castle block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Castle.Window">
            <summary>
            The window castle block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Medieval">
            <summary>
            The medieval block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Medieval.Anvil">
            <summary>
            The anvil medieval block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Medieval.Barrel">
            <summary>
            The barrel medieval block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Pipes">
            <summary>
            The pipes block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pipes.Left">
            <summary>
            The left pipe block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pipes.Horizontal">
            <summary>
            The horizontal pipe block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pipes.Right">
            <summary>
            The right pipe block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pipes.Up">
            <summary>
            The up pipe block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pipes.Vertical">
            <summary>
            The vertical pipe block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Pipes.Down">
            <summary>
            The down pipe block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Rocket">
            <summary>
            The rocket block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Rocket.White">
            <summary>
            The white rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Rocket.Blue">
            <summary>
            The blue rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Rocket.Green">
            <summary>
            The green rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Rocket.Pink">
            <summary>
            The pink rocket block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Mars">
            <summary>
            The mars block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Mars.VeryFineGrain">
            <summary>
            The very fine grain mars block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Mars.FineGrain">
            <summary>
            The fine grain mars block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Mars.MediumGrain">
            <summary>
            The medium grain mars block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Mars.LowGrain">
            <summary>
            The low grain mars block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Mars.RockyHill">
            <summary>
            The rocky hill mars block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Mars.Hill">
            <summary>
            The regular hill mars block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Checkers">
            <summary>
            The checkers block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Gray">
            <summary>
            The gray checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Blue">
            <summary>
            The blue checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Purple">
            <summary>
            The purple checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Red">
            <summary>
            The red checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Orange">
            <summary>
            The orange chekered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Yellow">
            <summary>
            The yellow checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Green">
            <summary>
            The green checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Turquoise">
            <summary>
            The turquoise checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Checkers.Black">
            <summary>
            The black checkered block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.JungleRuins">
            <summary>
            The jungle ruins block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.JungleRuins.Face">
            <summary>
            The face jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.JungleRuins.OneWay">
            <summary>
            The one way jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.JungleRuins.Gray">
            <summary>
            The gray jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.JungleRuins.Red">
            <summary>
            The red jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.JungleRuins.Blue">
            <summary>
            The blue jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.JungleRuins.Yellow">
            <summary>
            The yellow jungle ruins block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Jungle">
            <summary>
            The jungle block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Jungle.Pot">
            <summary>
            The pot jungle block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Lava">
            <summary>
            The lava block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Lava.Yellow">
            <summary>
            The yellow lava block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Lava.Orange">
            <summary>
            The orange lava block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Lava.Red">
            <summary>
            The red lava block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Sparta">
            <summary>
            The sparta block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sparta.White">
            <summary>
            The white sparta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sparta.Green">
            <summary>
            The green sparta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sparta.Red">
            <summary>
            The red sparta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Sparta.Pillar">
            <summary>
            The pillar sparta block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Farm">
            <summary>
            The farm block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Farm.Land">
            <summary>
            The farmland block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Christmas2014">
            <summary>
            The 2014 christmas block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Christmas2014.Snow">
            <summary>
            The snow 2014 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Christmas2014.OneWay">
            <summary>
            The one way 2014 christmas block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.OneWay">
            <summary>
            The one way block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.OneWay.Cyan">
            <summary>
            The turquoise one way block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.OneWay.Orange">
            <summary>
            The orange one way block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.OneWay.Gold">
            <summary>
            The gold one way block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.OneWay.Pink">
            <summary>
            The pink one way block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Blocks.Magic">
            <summary>
            The magic block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Magic.Green">
            <summary>
            The green magic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Magic.Purple">
            <summary>
            The purple magic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Magic.Yellow">
            <summary>
            The yellow magic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Magic.Blue">
            <summary>
            The blue magic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Blocks.Magic.Red">
            <summary>
            The red magic block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action">
            <summary>
            The action tab
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Keys">
            <summary>
            The keys block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Keys.Red">
            <summary>
            The red key
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Keys.Green">
            <summary>
            The green key
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Keys.Blue">
            <summary>
            The blue key
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Keys.Cyan">
            <summary>
            The cyan key
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Keys.Magenta">
            <summary>
            The magenta key
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Keys.Yellow">
            <summary>
            The yellow key
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Switches">
            <summary>
            The switches block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Switches.Switch">
            <summary>
            The switch
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Gates">
            <summary>
            The gates block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Red">
            <summary>
            The red key gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Green">
            <summary>
            The green key gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Blue">
            <summary>
            The blue key gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Cyan">
            <summary>
            The cyan key gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Magenta">
            <summary>
            The magenta key gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Yellow">
            <summary>
            The yellow key gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.GoldCoin">
            <summary>
            The gold coin gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.BlueCoin">
            <summary>
            The blue coin gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Death">
            <summary>
            The death gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Timed">
            <summary>
            The timed gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Switch">
            <summary>
            The switch gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.Zombie">
            <summary>
            The zombie gate
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gates.BuildersClub">
            <summary>
            The builders club gate
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Doors">
            <summary>
            The doors block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Red">
            <summary>
            The red key door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Green">
            <summary>
            The green key door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Blue">
            <summary>
            The blue key door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Cyan">
            <summary>
            The cyan key door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Magenta">
            <summary>
            The magenta key door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Yellow">
            <summary>
            The yellow key door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.GoldCoin">
            <summary>
            The gold coin door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.BlueCoin">
            <summary>
            The blue coin door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Death">
            <summary>
            The death door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Timed">
            <summary>
            The timed door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Switch">
            <summary>
            The switch door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.Zombie">
            <summary>
            The zombie door
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Doors.BuildersClub">
            <summary>
            The builders club door
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Gravity">
            <summary>
            The gravity arrows and dots block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.Down">
            <summary>
            The down-facing (empty) gravity
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.Left">
            <summary>
            The left-facing gravity arrow
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.Up">
            <summary>
            The up-facing gravity arrow
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.Right">
            <summary>
            The right-facing ravity arrow
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.Dot">
            <summary>
            The gravity dot
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.InvisLeft">
            <summary>
            The invisible left-facing gravity arrow
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.InvisUp">
            <summary>
            The invisible up-facing gravity arrow
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.InvisRight">
            <summary>
            The invisible right-facing gravity arrow
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Gravity.InvisDot">
            <summary>
            The inivisible gravity dot
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Boost">
            <summary>
            The boosts block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Boost.Left">
            <summary>
            The left-facing boost
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Boost.Right">
            <summary>
            The right-facing boost
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Boost.Up">
            <summary>
            The up-facing boost
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Boost.Down">
            <summary>
            The down-facing boost
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Music">
            <summary>
            The music blocks block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Music.Piano">
            <summary>
            The piano block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Music.Drum">
            <summary>
            The drum block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Coins">
            <summary>
            The coins block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Coins.Gold">
            <summary>
            The gold coin
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Coins.Blue">
            <summary>
            The blue coin
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Crowns">
            <summary>
            The crowns block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Crowns.Crown">
            <summary>
            The gold crown
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Tools">
            <summary>
            The tools block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Tools.Spawn">
            <summary>
            The spawn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Tools.Checkpoint">
            <summary>
            The checkpoint block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Tools.Trophy">
            <summary>
            The trophy block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Hazards">
            <summary>
            The hazards block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Hazards.Spike">
            <summary>
            The spike hazard
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Hazards.Fire">
            <summary>
            The fire hazard
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Ladders">
            <summary>
            The ladders block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Ladders.Chain">
            <summary>
            The chain
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Ladders.Ladder">
            <summary>
            The ladder
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Ladders.VerticalVine">
            <summary>
            The vertically positioned vine
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Ladders.HorizontalVine">
            <summary>
            The horizontally positioned vine
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Liquids">
            <summary>
            The liquids block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Liquids.Water">
            <summary>
            The water
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Liquids.Mud">
            <summary>
            The mud
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Liquids.Lava">
            <summary>
            The lava
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Portals">
            <summary>
            The portals block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Portals.InvisPortal">
            <summary>
            The invisible portal
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Portals.Portal">
            <summary>
            The portal
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Portals.World">
            <summary>
            The world portal
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Cake">
            <summary>
            The cake block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Cake.Block">
            <summary>
            The cake block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Hologram">
            <summary>
            The hologram block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Hologram.Block">
            <summary>
            The hologram block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Sign">
            <summary>
            The sign block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Sign.Block">
            <summary>
            The sign block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Admin">
            <summary>
            The admin block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Action.Admin.Text">
            <summary>
            The admin text block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Action.Diamond">
            <summary>
            The diamond block package
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor">
            <summary>
            The decorative tab
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Spring2011">
            <summary>
            The 2011 SprBlockID block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.GrassLeft">
            <summary>
            The left grass 2011 spring block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.GrassStraight">
            <summary>
            The straight grass 2011 spring block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.GrassRight">
            <summary>
            The right grass 2011 spring block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.HedgeLeft">
            <summary>
            The left hedge 2011 spring block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.HedgeStraight">
            <summary>
            The straight hedge 2011 spring block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.HedgeRight">
            <summary>
            The rioht hedge 2011 spring block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.Flower">
            <summary>
            The flower 2011 spring block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Spring2011.Bush">
            <summary>
            The bush 2011 spring block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Candy">
            <summary>
            The candy block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Candy.Cream">
            <summary>
            The cream candy block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Summer2011">
            <summary>
            The 2011 summer block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2011.Umbrella">
            <summary>
            The umbrella 2011 summer block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2011.SandLeft">
            <summary>
            The left sand 2011 summer block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2011.SandRight">
            <summary>
            The right sand 2011 summer block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2011.Rock">
            <summary>
            The rock 2011 summer block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2011.Shrub">
            <summary>
            The shrub 2011 summer block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Halloween2011">
            <summary>
            The 2011 halloween block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2011.Tomb">
            <summary>
            The tomb 2011 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2011.WebLeft">
            <summary>
            The left web 2011 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2011.WebRight">
            <summary>
            The right web 2011 halloween block 
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Christmas2011">
            <summary>
            The 2011 christmas block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2011.RedOrnament">
            <summary>
            The red ornament 2011 christmass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2011.GreenOrnament">
            <summary>
            The greem ornament 2011 christmass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2011.BlueOrnament">
            <summary>
            The blue ornament 2011 christmass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2011.Wreath">
            <summary>
            The wreath 2011 christmass block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2011.Star">
            <summary>
            The star 2011 christmass block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.NewYear2010">
            <summary>
            The 2010 new year block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.NewYear2010.Purple">
            <summary>
            The purple 2010 new year block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.NewYear2010.Gold">
            <summary>
            The gold 2010 new year block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.NewYear2010.Blue">
            <summary>
            The blue 2010 new year block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.NewYear2010.Red">
            <summary>
            The red 2010 new year block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.NewYear2010.Green">
            <summary>
            The green 2010 new year block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Christmas2010">
            <summary>
            The 2010 christmas block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2010.RightSnow">
            <summary>
            The right snow 2010 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2010.LeftSnow">
            <summary>
            The left snow 2010 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2010.Tree">
            <summary>
            The tree 2010 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2010.TreeDecorated">
            <summary>
            The decorated tree 2010 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2010.FenceSnowy">
            <summary>
            The fence 2010 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2010.Fence">
            <summary>
            The snowy fence 2010 christmas block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Easter2012">
            <summary>
            The 2012 easter block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Easter2012.BlueEgg">
            <summary>
            The blue egg 2012 easter block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Easter2012.PinkEgg">
            <summary>
            The pink egg 2012 easter block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Easter2012.YellowEgg">
            <summary>
            The yellow egg 2012 easter block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Easter2012.RedEgg">
            <summary>
            The red egg 2012 easter block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Easter2012.GreenEgg">
            <summary>
            The green egg 2012 easter block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Prison">
            <summary>
            The prison block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Prison.Bars">
            <summary>
            The prison bars block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Windows">
            <summary>
            The windows block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Clear">
            <summary>
            The clear window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Green">
            <summary>
            The green window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Cyan">
            <summary>
            The cyan window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Blue">
            <summary>
            The blue window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Purple">
            <summary>
            The purple window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Pink">
            <summary>
            The pink window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Red">
            <summary>
            The red window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Orange">
            <summary>
            The orange window block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Windows.Yellow">
            <summary>
            The yellow window block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Pirate">
            <summary>
            The pirate block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Pirate.Canon">
            <summary>
            The canon decoration pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Pirate.Skull">
            <summary>
            The skull pirate block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Vikings">
            <summary>
            The vikings block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Vikings.RedShield">
            <summary>
            The red shield viking block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Vikings.BlueShield">
            <summary>
            The blue shield viking block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Vikings.Axe">
            <summary>
            The axe viking block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Ninja">
            <summary>
            The ninja block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.LightRoofLeft">
            <summary>
            The left light roof ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.LightRoofRight">
            <summary>
            The right light roof ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.LightWindow">
            <summary>
            The light window ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.DarkRoofLeft">
            <summary>
            The left dark roof ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.DarkRoofRight">
            <summary>
            The right dark roof ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.DarkWindow">
            <summary>
            The dark window ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.Yin">
            <summary>
            The japanese symbol for yin or moon ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.Yang">
            <summary>
            The japanese symbol for yang or sunlight ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Ninja.YinYang">
            <summary>
            The yin yang ninja block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Cowboy">
            <summary>
            The cowboy block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.WhitePole">
            <summary>
            The white pole cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.DarkPole">
            <summary>
            The dark pole cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.BrownGateLeft">
            <summary>
            The left brown gate cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.BrownGateRight">
            <summary>
            The right brown gate cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.RedGateLeft">
            <summary>
            The left red gate cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.RedGateRight">
            <summary>
            The right red gate cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.BlueGateLeft">
            <summary>
            The left blue gate cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.BlueGateRight">
            <summary>
            The right blue gate cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.PinkWindow">
            <summary>
            The pink window cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.LightBrownRail">
            <summary>
            The light brown railing cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.DarkBrownRail">
            <summary>
            The dark brown railing cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.LightRedRail">
            <summary>
            The light red railing cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.DarkRedRail">
            <summary>
            The dark red railing cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.LightBlueRail">
            <summary>
            The light blue railing cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cowboy.DarkBlueRail">
            <summary>
            The dark blue railing cowboy block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Water">
            <summary>
            The water block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Water.Wave">
            <summary>
            The wave water block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Sand">
            <summary>
            The sand block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sand.LightYellow">
            <summary>
            The light yellow sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sand.Gray">
            <summary>
            The gray sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sand.DarkYellow">
            <summary>
            The dark yellow sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sand.Orange">
            <summary>
            The orange sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sand.LightBrown">
            <summary>
            The light brown sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sand.DarkBrown">
            <summary>
            The dark brown sand block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Summer2012">
            <summary>
            The 2012 summer block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2012.Ball">
            <summary>
            The ball summer 2012 block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2012.Bucket">
            <summary>
            The bucket summer 2012 block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2012.Shovel">
            <summary>
            The shovel summer 2012 block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Summer2012.Margarita">
            <summary>
            The margarita summer 2012 block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Cloud">
            <summary>
            The cloud block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.Down">
            <summary>
            The down cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.Up">
            <summary>
            The up cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.Right">
            <summary>
            The right cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.Left">
            <summary>
            The left cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.LeftDown">
            <summary>
            The left and down cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.RightDown">
            <summary>
            The right and down cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.RightUp">
            <summary>
            The right and up cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Cloud.LeftUp">
            <summary>
            The left and up cloud block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Signs">
            <summary>
            The signs block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Signs.Fire">
            <summary>
            The fire sign block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Signs.Death">
            <summary>
            The death sign block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Signs.Electric">
            <summary>
            The electric sign block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Signs.Hazard">
            <summary>
            The hazard sign block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Signs.HorizontalBar">
            <summary>
            The horizontal bar block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Signs.VerticalBar">
            <summary>
            The vertical bar block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Castle">
            <summary>
            The castle block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Castle.Ceiling">
            <summary>
            The ceiling castle block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Castle.Tower">
            <summary>
            The tower castle block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Medieval">
            <summary>
            The medieval block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Medieval.BlueFlag">
            <summary>
            The blue medieval flag block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Medieval.RedFlag">
            <summary>
            The red medieval flag block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Medieval.Sword">
            <summary>
            The sword medieval block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Medieval.Shield">
            <summary>
            The shield medieval block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Medieval.Rock">
            <summary>
            The rock medieval block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Rocket">
            <summary>
            The rocket block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Rocket.Monitor">
            <summary>
            The monitor rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Rocket.RedLight">
            <summary>
            The red light rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Rocket.BlueLight">
            <summary>
            The blue light rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Rocket.Disk">
            <summary>
            The rocket floppy disk block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Mars">
            <summary>
            The mars block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Mars.Rock">
            <summary>
            The mars rock block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Monster">
            <summary>
            The monster block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Monster.BigTooth">
            <summary>
            The big tooth monster block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Monster.BottomTeeth">
            <summary>
            The bottom teeth monster block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Monster.TopTeeth">
            <summary>
            The top teeth monster block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Monster.YellowEye">
            <summary>
            The yellow eye monster block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Monster.BlueEye">
            <summary>
            The blue eye monster block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Fog">
            <summary>
            The fog block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.Block">
            <summary>
            The fog block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.Down">
            <summary>
            The down cloud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.Up">
            <summary>
            The up fog block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.Right">
            <summary>
            The right fog block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.Left">
            <summary>
            The left fog block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.LeftDown">
            <summary>
            The left and down fog block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.RightDown">
            <summary>
            The right and down fog block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.RightUp">
            <summary>
            The right and up fog block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Fog.LeftUp">
            <summary>
            The left and up fog block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Halloween2012">
            <summary>
            The 2012 halloween block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2012.TeslaTop">
            <summary>
            The testla top 2012 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2012.TeslaCoil">
            <summary>
            The tesla coil 2012 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2012.WiresVertical">
            <summary>
            The vertical wires 2012 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2012.WiresHorizontal">
            <summary>
            The horizontal wires 2012 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Halloween2012.ElectricalCurrent">
            <summary>
            The electrical currnet 2012 halloween block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Jungle">
            <summary>
            The jungle block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Jungle.Shrub">
            <summary>
            The jungle shrub block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Jungle.Log">
            <summary>
            The jungle log block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Jungle.GoldCrusade">
            <summary>
            The gold crusade jungle block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Christmas2012">
            <summary>
            The red cross 2012 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2012.BlueVertical">
            <summary>
            The blue vertical 2012 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2012.BlueHorizontal">
            <summary>
            The blue horizontal 2012 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2012.BlueCross">
            <summary>
            The blue cross 2012 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2012.RedVertical">
            <summary>
            The red vertical 2012 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2012.RedHorizontal">
            <summary>
            The red horizontal 2012 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2012.RedCross">
            <summary>
            The red cross 2012 christmas block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Lava">
            <summary>
            The lava block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Lava.Vapor">
            <summary>
            The lava vapor block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Swamp">
            <summary>
            The swamp block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Swamp.Mud">
            <summary>
            The swamp mud block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Swamp.Bush">
            <summary>
            The swamp bush block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Swamp.Log">
            <summary>
            The swamp log block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Swamp.NuclearWasteSign">
            <summary>
            The nuclear waste sign swamp block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Scifi2013">
            <summary>
            The 2013 science fiction block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Scifi2013.BlueDiagonal">
            <summary>
            The blue diagonal 2013 scifi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Scifi2013.Blue">
            <summary>
            The blue 2013 scifi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Scifi2013.GreenDiagonal">
            <summary>
            The green diagonal 2013 scifi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Scifi2013.Green">
            <summary>
            The green 2013 scifi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Scifi2013.GoldDiagonal">
            <summary>
            The gold diagonal 2013 scifi block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Scifi2013.Gold">
            <summary>
            The gold 2013 scifi block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Sparta">
            <summary>
            The sparta block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sparta.PillarTop">
            <summary>
            The top pillar sparta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sparta.Pillar">
            <summary>
            The pillar sparta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Sparta.PillarBase">
            <summary>
            The pillar base sparta block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Farm">
            <summary>
            The farm block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Farm.Wheat">
            <summary>
            The wheat farm block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Farm.Corn">
            <summary>
            The corn farm block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Farm.FenceLeft">
            <summary>
            The left fence farm block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Farm.FenceRight">
            <summary>
            The right fence farm block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Autumn2014">
            <summary>
            The 2014 autumn block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Autumn2014.RightPile">
            <summary>
            The right pile 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Autumn2014.LeftPile">
            <summary>
            The left pile 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Autumn2014.GrassLeft">
            <summary>
            The left grass 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Autumn2014.Grass">
            <summary>
            The grass 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Autumn2014.GrassRight">
            <summary>
            The right grass 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Autumn2014.Acorn">
            <summary>
            The acorn 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Autumn2014.Pumpkin">
            <summary>
            The pumpkin 2014 autumn block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Christmas2014">
            <summary>
            The 2014 christmas block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2014.SnowLeft">
            <summary>
            The left snow 2014 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2014.Snow">
            <summary>
            The snow 2014 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2014.SnowRight">
            <summary>
            The right snow 2014 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2014.CandyCane">
            <summary>
            The candy cane 2014 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2014.Wreath">
            <summary>
            The wreath 2014 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2014.Stocking">
            <summary>
            The stocking 2014 christmas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Christmas2014.Bow">
            <summary>
            The bow 2014 christmas block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Decor.Valentines2014">
            <summary>
            The 2014 valentines block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Valentines2014.RedHeart">
            <summary>
            The red heart 2014 valentines block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Valentines2014.MagentaHeart">
            <summary>
            The magenta heart 2014 valentines block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Decor.Valentines2014.PinkHeart">
            <summary>
            The pink heart 2014 valentines block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background">
            <summary>
            The background tab
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Basic">
            <summary>
            The basic block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Gray">
            <summary>
            The gray basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.DarkBlue">
            <summary>
            The dark blue basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Purple">
            <summary>
            The purple basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Red">
            <summary>
            The red basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Orange">
            <summary>
            The orange basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Yellow">
            <summary>
            The yellow basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Green">
            <summary>
            The green basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Turquoise">
            <summary>
            The turquoise basic block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Basic.Black">
            <summary>
            The black basic block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Brick">
            <summary>
            The brick block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.Gray">
            <summary>
            The gray brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.DirtBrown">
            <summary>
            The dirt brown brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.DarkGreen">
            <summary>
            The dark green brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.DarkBlue">
            <summary>
            The dark blue brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.Purple">
            <summary>
            The purple brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.LightGreen">
            <summary>
            The light green brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.Red">
            <summary>
            The red brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.PaleBrown">
            <summary>
            The pale brown brick block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Brick.Black">
            <summary>
            The black brick block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Checkers">
            <summary>
            The checkers block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Gray">
            <summary>
            The gray checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Blue">
            <summary>
            The blue checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Purple">
            <summary>
            The purple checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Red">
            <summary>
            The red checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Orange">
            <summary>
            The orange chekered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Yellow">
            <summary>
            The yellow checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Green">
            <summary>
            The green checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Turquoise">
            <summary>
            The turquoise checkered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Checkers.Black">
            <summary>
            The black checkered block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Dark">
            <summary>
            The dark block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Gray">
            <summary>
            The gray dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Blue">
            <summary>
            The blue dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Purple">
            <summary>
            The purple dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Red">
            <summary>
            The red dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Orange">
            <summary>
            The orange dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Yellow">
            <summary>
            The yellow dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Green">
            <summary>
            The green dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Turquoise">
            <summary>
            The turquoise dark block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Dark.Black">
            <summary>
            The black dark block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Normal">
            <summary>
            The normal block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Gray">
            <summary>
            The gray normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Blue">
            <summary>
            The blue normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Purple">
            <summary>
            The purple normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Red">
            <summary>
            The red normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Orange">
            <summary>
            The orange normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Yellow">
            <summary>
            The yellow normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Green">
            <summary>
            The green normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Turquoise">
            <summary>
            The turquoise normal block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Normal.Black">
            <summary>
            The black normal block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Pastel">
            <summary>
            The pastel block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pastel.Yellow">
            <summary>
            The yellow pastel block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pastel.BrightGreen">
            <summary>
            The bright green pastel block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pastel.LightGreen">
            <summary>
            The yellow pastel block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pastel.Turquoise">
            <summary>
            The turquoise pastel block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pastel.Blue">
            <summary>
            The blue pastel block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pastel.Red">
            <summary>
            The red pastel block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Canvas">
            <summary>
            The canvas block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Canvas.Orange">
            <summary>
            The orange canvas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Canvas.Pewter">
            <summary>
            The pewter canvas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Canvas.Gold">
            <summary>
            The gold canvas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Canvas.Lime">
            <summary>
            The lime canvas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Canvas.Blue">
            <summary>
            The blue canvas block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Canvas.Gray">
            <summary>
            The gray canvas block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Carnival">
            <summary>
            The carnival block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Carnival.RedYellow">
            <summary>
            The red and yellow striped carnival block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Carnival.Purple">
            <summary>
            The striped purple carnival block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Carnival.Pink">
            <summary>
            The pink carnival block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Carnival.Checkered">
            <summary>
            The checkered carnival block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Carnival.Green">
            <summary>
            The green carnival block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Candy">
            <summary>
            The candy block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Candy.Pink">
            <summary>
            The pink striped candy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Candy.Blue">
            <summary>
            The blue striped candy block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Halloween2011">
            <summary>
            The 2011 halloween block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Halloween2011.Gray">
            <summary>
            The gray 2011 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Halloween2011.Brick">
            <summary>
            The brick 2011 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Halloween2011.BrickRight">
            <summary>
            The right brick 2011 halloween block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Halloween2011.BrickLeft">
            <summary>
            The left brick 2011 halloween block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Prison">
            <summary>
            The prison block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Prison.Brick">
            <summary>
            The brick prison block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Prison.Picture">
            <summary>
            The picture prison block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Prison.WindowDay">
            <summary>
            The day window prison block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Prison.WindowNight">
            <summary>
            The night window prison block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Pirate">
            <summary>
            The pirate block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pirate.WoodDark">
            <summary>
            The dark wood pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pirate.WoodLight">
            <summary>
            The light wood pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pirate.WoodHoles">
            <summary>
            The wood with holes pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pirate.Bouy">
            <summary>
            The buoy pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pirate.Window">
            <summary>
            The window pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pirate.Canon">
            <summary>
            The canon pirate block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Pirate.Death">
            <summary>
            The death pirate block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Vikings">
            <summary>
            The vikings block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Vikings.FullSlab">
            <summary>
            The full slab vikings block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Vikings.OffsetSlab">
            <summary>
            The offset slab vikings block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Vikings.Stripe">
            <summary>
            The striped vikings block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Ninja">
            <summary>
            The ninja block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Ninja.White">
            <summary>
            The white ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Ninja.Gray">
            <summary>
            The gray ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Ninja.LightShingles">
            <summary>
            The light roof shingles ninja block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Ninja.DarkShingles">
            <summary>
            The dark roof shingles ninja block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Cowboy">
            <summary>
            The cowboy block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Cowboy.WoodLight">
            <summary>
            The light wood cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Cowboy.WoodDark">
            <summary>
            The light wood cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Cowboy.RedWoodLight">
            <summary>
            The light red wood cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Cowboy.RedWoodDark">
            <summary>
            The dark red wood cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Cowboy.BlueWoodLight">
            <summary>
            The light blue wood cowboy block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Cowboy.BlueWoodDark">
            <summary>
            The dark blue wood cowboy block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Water">
            <summary>
            The water block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Water.Clear">
            <summary>
            The clear water block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Water.Octopus">
            <summary>
            The octopus water block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Water.Cod">
            <summary>
            The cod water block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Water.Seahorse">
            <summary>
            The seahorse water block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Water.Weed">
            <summary>
            The weed water block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Sand">
            <summary>
            The sand block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sand.LightYellow">
            <summary>
            The light yellow sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sand.Gray">
            <summary>
            The gray sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sand.DarkYellow">
            <summary>
            The dark yellow sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sand.Orange">
            <summary>
            The orange sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sand.LightBrown">
            <summary>
            The light brown sand block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sand.DarkBrown">
            <summary>
            The dark brown sand block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.PlateIron">
            <summary>
            The plate iron block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.PlateIron.Plain">
            <summary>
            The plain plate iron block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.PlateIron.Gray">
            <summary>
            The gray plate iron block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.PlateIron.Blue">
            <summary>
            The blue plate iron block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.PlateIron.Green">
            <summary>
            The green plate iron block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.PlateIron.Gold">
            <summary>
            The gold plate iron block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Timbered">
            <summary>
            The timbered block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.RoofStraw">
            <summary>
            The straw roof timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.RoofBrick">
            <summary>
            The brick roof timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.RoofStone">
            <summary>
            The stone roof timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.VSupport">
            <summary>
            The v support timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.SupportLeftRight">
            <summary>
            The v support from the top left to the bottom right timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.SupportRightLeft">
            <summary>
            The support from the top right to the bottom left timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.Support">
            <summary>
            The support timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.SupportDown">
            <summary>
            The down support timbered block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Timbered.Window">
            <summary>
            The window timbered block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Castle">
            <summary>
            The castle block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Castle.Brick">
            <summary>
            The brick castle block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Medieval">
            <summary>
            The medieval block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Medieval.Planks">
            <summary>
            The planks medieval block 
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Rocket">
            <summary>
            The rocket block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Rocket.Gray">
            <summary>
            The gray rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Rocket.Blue">
            <summary>
            The blue rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Rocket.Green">
            <summary>
            The green rocket block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Rocket.Red">
            <summary>
            The red rocket block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Mars">
            <summary>
            The mars block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Mars.Sky">
            <summary>
            The sky mars block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Mars.Star">
            <summary>
            The star mars block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Mars.StarBig">
            <summary>
            The big star mars block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Monster">
            <summary>
            The monster block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Monster.LightGrass">
            <summary>
            The light grass monster block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Monster.DarkGrass">
            <summary>
            The dark grass monster block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.JungleRuins">
            <summary>
            The jungle ruins block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.JungleRuins.Gray">
            <summary>
            The gray jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.JungleRuins.Red">
            <summary>
            The red jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.JungleRuins.Blue">
            <summary>
            The blue jungle ruins block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.JungleRuins.Green">
            <summary>
            The green jungle ruins block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Jungle">
            <summary>
            The jungle block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Jungle.BrightBush">
            <summary>
            The bright bush jungle block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Jungle.Bush">
            <summary>
            The bush jungle block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Jungle.DarkBush">
            <summary>
            The dark dark jungle block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Lava">
            <summary>
            The lava block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Lava.Yellow">
            <summary>
            The yellow lava block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Lava.Orange">
            <summary>
            The orange lava block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Lava.Red">
            <summary>
            The red lava block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Swamp">
            <summary>
            The swamp block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Swamp.Grass">
            <summary>
            The swamp grass block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Scifi2013">
            <summary>
            The 2013 science fiction block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Scifi2013.Block">
            <summary>
            The 2013 scifi block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Sparta">
            <summary>
            The sparta block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sparta.Gray">
            <summary>
            The gray sparta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sparta.Green">
            <summary>
            The green sparta block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Sparta.Red">
            <summary>
            The red sparta block
            </summary>
        </member>
        <member name="T:Fluid.Room.BlockIDs.Background.Autumn2014">
            <summary>
            The 2014 autumn block package
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Autumn2014.GoldLeaves">
            <summary>
            The gold leaves 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Autumn2014.OrangeLeaves">
            <summary>
            The orange leaves 2014 autumn block
            </summary>
        </member>
        <member name="F:Fluid.Room.BlockIDs.Background.Autumn2014.RedLeaves">
            <summary>
            The red leaves 2014 autumn block
            </summary>
        </member>
        <member name="M:Fluid.Room.CoinBlock.#ctor(Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a coin block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="goal">The coin door coin goal</param>
        </member>
        <member name="M:Fluid.Room.CoinBlock.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a coin block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="goal">The coin door coin goal</param>
        </member>
        <member name="M:Fluid.Room.CoinBlock.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.CoinBlock.Clone">
            <summary>
            Creates a clone of this coin block
            </summary>
            <returns>A clone of this coin block</returns>
        </member>
        <member name="M:Fluid.Room.CoinBlock.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a coin block is equal to an block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.CoinBlock.Goal">
            <summary>
            Gets the coin door's coin goal
            </summary>
        </member>
        <member name="M:Fluid.Room.DeathBlock.#ctor(Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a death block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="requiredDeaths">The deaths required to activate</param>
        </member>
        <member name="M:Fluid.Room.DeathBlock.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a death block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="requiredDeaths">The deaths required to activate</param>
        </member>
        <member name="M:Fluid.Room.DeathBlock.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.DeathBlock.Clone">
            <summary>
            Creates a clone of this death block
            </summary>
            <returns>A clone of this death block</returns>
        </member>
        <member name="M:Fluid.Room.DeathBlock.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a death block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.DeathBlock.RequiredDeaths">
            <summary>
            Gets or sets the required deaths
            </summary>
        </member>
        <member name="T:Fluid.Room.LabelBlock">
            <summary>
            A label block
            </summary>
        </member>
        <member name="T:Fluid.Room.TextBlock">
            <summary>
            A Sign or label
            </summary>
        </member>
        <member name="M:Fluid.Room.TextBlock.#ctor(Fluid.Room.BlockID,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a text block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="text">The text of the block</param>
        </member>
        <member name="M:Fluid.Room.TextBlock.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a text block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="text">The text of the block</param>
        </member>
        <member name="M:Fluid.Room.TextBlock.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.TextBlock.Clone">
            <summary>
            Creates a clone of this text block
            </summary>
            <returns>A clone of this text block</returns>
        </member>
        <member name="M:Fluid.Room.TextBlock.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a text block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.TextBlock.Text">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="M:Fluid.Room.LabelBlock.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a label block
            </summary>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="text">The text of the block</param>
            <param name="hexColor">The html color of the label</param>
        </member>
        <member name="M:Fluid.Room.LabelBlock.#ctor(System.Int32,System.Int32,System.String,Fluid.FluidColor)">
            <summary>
            Creates a label block
            </summary>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="text">The text of the block</param>
            <param name="color">The color of the label</param>
        </member>
        <member name="M:Fluid.Room.LabelBlock.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a label block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="text">The text of the block</param>
        </member>
        <member name="M:Fluid.Room.LabelBlock.#ctor(Fluid.WorldConnection,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a label block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="text">The text of the block</param>
            <param name="hexColor">The hexadecimal color string</param>
        </member>
        <member name="M:Fluid.Room.LabelBlock.#ctor(Fluid.WorldConnection,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a label block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="text">The text of the block</param>
        </member>
        <member name="M:Fluid.Room.LabelBlock.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.LabelBlock.Clone">
            <summary>
            Creates a clone of this label block
            </summary>
            <returns>A clone of this label block</returns>
        </member>
        <member name="M:Fluid.Room.LabelBlock.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a label block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.LabelBlock.Color">
            <summary>
            Gets the label color
            </summary>
        </member>
        <member name="F:Fluid.Room.Layer.Foreground">
            <summary>
            The foreground layer
            </summary>
        </member>
        <member name="F:Fluid.Room.Layer.Background">
            <summary>
            The background layer
            </summary>
        </member>
        <member name="M:Fluid.Room.MusicBlock.#ctor(Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a music block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="musicId">The id of the music; Drum, Piano</param>
        </member>
        <member name="M:Fluid.Room.MusicBlock.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a music block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="musicId">The id of the music; Drum, Piano</param>
        </member>
        <member name="M:Fluid.Room.MusicBlock.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.MusicBlock.Clone">
            <summary>
            Creates a clone of this music block
            </summary>
            <returns>A clone of this music block</returns>
        </member>
        <member name="M:Fluid.Room.MusicBlock.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a music block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.MusicBlock.MusicID">
            <summary>
            <para>Gets the music id</para>                               
            <para>Use PianoNote and PercussionSound for more information</para>
            </summary>
        </member>
        <member name="M:Fluid.Room.RotatableBlock.#ctor(Fluid.Room.BlockID,System.Int32,System.Int32,Fluid.Room.Rotation)">
            <summary>
            Creates a rotatable block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="rotation">The rotation of the block</param>
        </member>
        <member name="M:Fluid.Room.RotatableBlock.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32,Fluid.Room.Rotation)">
            <summary>
            Creates a rotatable block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="rotation">The rotation of the block</param>
        </member>
        <member name="M:Fluid.Room.RotatableBlock.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.RotatableBlock.Clone">
            <summary>
            Creates a clone of this rotatable block
            </summary>
            <returns>A clone of this rotatable block</returns>
        </member>
        <member name="M:Fluid.Room.RotatableBlock.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a rotatatable block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.RotatableBlock.Rotation">
            <summary>
            Gets the rotation of the block
            </summary>
        </member>
        <member name="M:Fluid.Room.Portal.#ctor(Fluid.Room.BlockID,System.Int32,System.Int32,Fluid.Room.Rotation,System.UInt32,System.UInt32)">
            <summary>
            Creates a portal block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="rotation">The rotation</param>
            <param name="sourceId">The portal's source id</param>
            <param name="target">The portal's target id</param>
        </member>
        <member name="M:Fluid.Room.Portal.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32,Fluid.Room.Rotation,System.UInt32,System.UInt32)">
            <summary>
            Creates a portal block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="rotation">The rotation</param>
            <param name="sourceId">The portal's source id</param>
            <param name="target">The portal's target id</param>
        </member>
        <member name="M:Fluid.Room.Portal.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.Portal.Clone">
            <summary>
            Creates a clone of this portal
            </summary>
            <returns>A clone of this portal</returns>
        </member>
        <member name="M:Fluid.Room.Portal.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a portal block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.Portal.SourceID">
            <summary>
            Gets the portal's id
            </summary>
        </member>
        <member name="P:Fluid.Room.Portal.Target">
            <summary>
            Gets the portal's target
            </summary>
        </member>
        <member name="M:Fluid.Room.PurpleBlock.#ctor(Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a world portal block
            </summary>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="switchId">The switch id</param>
        </member>
        <member name="M:Fluid.Room.PurpleBlock.#ctor(Fluid.WorldConnection,Fluid.Room.BlockID,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a world portal block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="blockId">the block ID</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="switchId">The switch id</param>
        </member>
        <member name="M:Fluid.Room.PurpleBlock.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.PurpleBlock.Clone">
            <summary>
            Creates a clone of this purple block
            </summary>
            <returns>A clone of this purple block</returns>
        </member>
        <member name="M:Fluid.Room.PurpleBlock.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a purple block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.PurpleBlock.SwitchID">
            <summary>
            Gets or sets the switch ID
            </summary>
        </member>
        <member name="F:Fluid.Room.Rotation.Down">
            <summary>
            Rotated downwards
            </summary>
        </member>
        <member name="F:Fluid.Room.Rotation.Left">
            <summary>
            Rotated to the left direction
            </summary>
        </member>
        <member name="F:Fluid.Room.Rotation.Up">
            <summary>
            Rotated upwards
            </summary>
        </member>
        <member name="F:Fluid.Room.Rotation.Right">
            <summary>
            Rotated to the right direction
            </summary>
        </member>
        <member name="M:Fluid.Room.WorldPortal.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a world portal block
            </summary>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="targetId">The target world id</param>
        </member>
        <member name="M:Fluid.Room.WorldPortal.#ctor(Fluid.WorldConnection,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a world portal block
            </summary>
            <param name="worldCon">The world connection</param>
            <param name="x">The x coorindate</param>
            <param name="y">The y coordinate</param>
            <param name="targetId">The target world id</param>
        </member>
        <member name="M:Fluid.Room.WorldPortal.Upload">
            <summary>
            Uploads the block to the server
            </summary>
        </member>
        <member name="M:Fluid.Room.WorldPortal.Clone">
            <summary>
            Creates a clone of this world portal
            </summary>
            <returns>A clone of this world portal</returns>
        </member>
        <member name="M:Fluid.Room.WorldPortal.EqualsBlock(Fluid.Room.Block)">
            <summary>
            Tests if a wolrd portal block is equal to a block
            </summary>
            <param name="b">The block</param>
            <returns>True if equal in value</returns>
        </member>
        <member name="P:Fluid.Room.WorldPortal.TargetID">
            <summary>
            Gets or sets the target ID
            </summary>
        </member>
        <member name="M:Fluid.ChatManager.GetCount(System.String)">
            <summary>
            Gets the amount of times this message has already been chatted
            </summary>
            <param name="message">The message to count</param>
            <returns>The amount of recurrances</returns>
        </member>
        <member name="M:Fluid.ChatManager.Add(Fluid.ChatMessage)">
            <summary>
            Adds a chat message to the chat
            </summary>
            <param name="chatMessage"></param>
        </member>
        <member name="M:Fluid.ChatManager.SplitMessage(System.String,System.Int32,System.Int32)">
            <summary>
            Splits a message up into segments by length
            </summary>
            <param name="message">The message</param>
            <param name="length">Segment length</param>
            <param name="offset">Offset length used for adding unique characters</param>
            <returns>The message segments</returns>
        </member>
        <member name="M:Fluid.ChatManager.Say(System.String,System.String)">
            <summary>
            Says a message
            </summary>
            <param name="message">The message to say</param>
        </member>
        <member name="M:Fluid.ChatManager.#ctor(Fluid.WorldConnection)">
            <summary>
            Creates a new chat manager
            </summary>
        </member>
        <member name="P:Fluid.ChatManager.IsEmpty">
            <summary>
            Gets whether the chat is empty
            </summary>
        </member>
        <member name="P:Fluid.ChatManager.Count">
            <summary>
            Gets the amount of chat messages in the chat
            </summary>
        </member>
        <member name="P:Fluid.ChatManager.Last">
            <summary>
            Gets the last chat message
            </summary>
        </member>
        <member name="M:Fluid.ChatMessage.#ctor(Fluid.Player,System.String,System.Boolean)">
            <summary>
            Creates a new chat message
            </summary>
            <param name="player">The player</param>
            <param name="text">The text</param>
            <param name="isOld">Is the chatmessage old</param>
        </member>
        <member name="P:Fluid.ChatMessage.Player">
            <summary>
            Gets the player who chatted
            </summary>
        </member>
        <member name="P:Fluid.ChatMessage.Text">
            <summary>
            Gets the chat message
            </summary>
        </member>
        <member name="P:Fluid.ChatMessage.IsOld">
            <summary>
            Gets whether the chat message is old
            </summary>
        </member>
        <member name="M:Fluid.Config.#ctor">
            <summary>
            Creates the default config
            </summary>
        </member>
        <member name="P:Fluid.Config.GameID">
            <summary>
            Gets or Sets the PlayerIO Id attached to the game
            </summary>
        </member>
        <member name="P:Fluid.Config.MouseBreakerGameUrl">
            <summary>
            Gets or Sets the mousebreaker game url
            </summary>
        </member>
        <member name="P:Fluid.Config.NormalRoom">
            <summary>
            Gets or Sets the normal room format
            </summary>
        </member>
        <member name="P:Fluid.Config.BetaRoom">
            <summary>
            Gets or Sets the beta room format
            </summary>
        </member>
        <member name="P:Fluid.Config.LobbyRoom">
            <summary>
            Gets or Sets the lobby room format
            </summary>
        </member>
        <member name="P:Fluid.Config.AuthRoom">
            <summary>
            Gets or Sets the auth room format
            </summary>
        </member>
        <member name="P:Fluid.Config.LobbyGuestRoom">
            <summary>
            Gets or Sets the lobby guest room format
            </summary>
        </member>
        <member name="P:Fluid.Config.AddProfilesToDatabase">
            <summary>
            Gets or Sets whether if a player could not be found in the database, to look up the player and add the profile
            </summary>
        </member>
        <member name="M:Fluid.ConnectionValue.GetLag">
            <summary>
            Gets the pure connection lag
            </summary>
            <returns>The lag in milliseconds if successful; otherwise -1</returns>
        </member>
        <member name="M:Fluid.ConnectionValue.GetBlockThrottle">
            <summary>
            Gets the suggested block throttle
            </summary>
        </member>
        <member name="M:Fluid.Events.DisconnectEvent.Reconnect">
            <summary>
            Attempts to reestablish the connection
            </summary>
        </member>
        <member name="P:Fluid.Events.DisconnectEvent.Connection">
            <summary>
            Gets the world connection
            </summary>
        </member>
        <member name="P:Fluid.Events.DisconnectEvent.Message">
            <summary>
            Gets the disconnection message from the server
            </summary>
        </member>
        <member name="P:Fluid.Events.DisconnectEvent.TryReconnect">
            <summary>
            Gets if the connection should try and reconnect
            </summary>
        </member>
        <member name="P:Fluid.Events.PhysicsUpdateEvent.Player">
            <summary>
            Gets the player whose physics were updated
            </summary>
        </member>
        <member name="M:Fluid.Friend.GetProfile">
            <summary>
            Gets the players profile
            </summary>
            <returns>The profile if successful; otherwise null</returns>
        </member>
        <member name="M:Fluid.Friend.Delete">
            <summary>
            Deletes the friend
            </summary>
        </member>
        <member name="M:Fluid.Friend.DeletePending">
            <summary>
            Deletes the pending friend
            </summary>
        </member>
        <member name="M:Fluid.Friend.Accept">
            <summary>
            Accepts the friend
            </summary>
        </member>
        <member name="M:Fluid.Friend.Deny">
            <summary>
            Denies the friend
            </summary>
        </member>
        <member name="M:Fluid.Friend.Block">
            <summary>
            Blocks the friend
            </summary>
        </member>
        <member name="M:Fluid.Friend.UnBlock">
            <summary>
            UnBlocks the friend
            </summary>
        </member>
        <member name="M:Fluid.Friend.SetOnlineStatus(System.Boolean,Fluid.FaceID,System.String,System.String)">
            <summary>
            Sets the friend's status
            </summary>
            <param name="online">Is online</param>
            <param name="smiley">The selected smiley</param>
            <param name="worldId">The World ID</param>
            <param name="worldName">The world name</param>
        </member>
        <member name="M:Fluid.Friend.#ctor(Fluid.LobbyConnection,System.String)">
            <summary>
            Creates a new friend
            </summary>
            <param name="lobbyConnection">The lobby connection</param>
            <param name="username">The username</param>
        </member>
        <member name="P:Fluid.Friend.Username">
            <summary>
            Gets the friend's username
            </summary>
        </member>
        <member name="P:Fluid.Friend.Online">
            <summary>
            Gets whether the friend is online
            </summary>
        </member>
        <member name="P:Fluid.Friend.Smiley">
            <summary>
            Gets the player's default smiley
            </summary>
        </member>
        <member name="P:Fluid.Friend.In">
            <summary>
            Gets the player the world is in; otherwise null
            </summary>
        </member>
        <member name="T:Fluid.FluidClient">
            <summary>
            The client used for logging in to the game
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.GetGameVersion">
            <summary>
            Loads the game's version from the database if availible
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.GetConnectionType(System.String)">
            <summary>
            Gets the connection type
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.GetLobbyRooms">
            <summary>
            Gets a list of rooms in the lobby
            </summary>
            <returns>The list of rooms in the lobby</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetLobbyRoomsAsync">
            <summary>
            Gets a list of rooms in the lobby asynchronously
            </summary>
            <returns>The async task</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetPlayersOnline">
            <summary>
            Gets the list of players online
            </summary>
            <returns>The list of players online</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetPlayersOnlineAsync">
            <summary>
            Gets the players online asynchronously
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluid.FluidClient.GetPlayerByUsername(System.String)">
            <summary>
            Gets a player from everybody edits
            </summary>
            <param name="username">Their username</param>
            <returns>The player if successful; otherwise null</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetPlayerByConnectionId(System.String)">
            <summary>
            Gets a player from everybody edits
            </summary>
            <param name="connectionId">Their connection id</param>
            <returns>The player if successful; otherwise null</returns>
        </member>
        <member name="M:Fluid.FluidClient.LoadWorld(System.String)">
            <summary>
            Loads a world from the database; the world will be the last time 
            the user saved his/her world
            </summary>
            <param name="worldIdOrUrl">World Id or Url</param>
        </member>
        <member name="M:Fluid.FluidClient.LoadWorldAsync(System.String)">
            <summary>
            Loads a world from the database; the world will be the last time 
            the user saved his/her world asynchronously
            </summary>
            <param name="worldIdOrUrl">World Id or Url</param>
        </member>
        <member name="M:Fluid.FluidClient.LoadProfile(System.String)">
            <summary>
            Loads a profile
            </summary>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.FluidClient.LoadProfileAsync(System.String)">
            <summary>
            Loads a profile asynchronously
            </summary>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.FluidClient.LoadMyPlayerObject">
            <summary>
            Loads the player object
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.LoadMyPlayerObjectAsync">
            <summary>
            Loads the player object asynchronously
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.LoadPlayerItems">
            <summary>
            Loads all shop items owned
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.LoadPlayerItemsAsync">
            <summary>
            Loads all shop items owned asynchronously
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.OnClientCreated(PlayerIOClient.Client)">
            <summary>
            Event handler for when a client is created
            </summary>
            <param name="client">The created client</param>
        </member>
        <member name="M:Fluid.FluidClient.OnPlayerIOErrorReceived(PlayerIOClient.PlayerIOError)">
            <summary>
            Event handler for when a playerio error is received
            </summary>
            <param name="error">The playerio error</param>
        </member>
        <member name="M:Fluid.FluidClient.LogIn">
            <summary>
            Log's in to the game
            </summary>
            <returns>True if logged in successfully; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidClient.LogIn(System.Boolean)">
            <summary>
            Log's in the the game
            </summary>
            <param name="useSecureConnection">
            If enabled, the connection will be secure, but if false
            the connection will be faster
            </param>
            <returns>True if logged in successfully; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidClient.LogInAsync">
            <summary>
            Log's in to the game asynchronously
            </summary>
            <returns>True if logged in successfully; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidClient.LogInAsync(System.Boolean)">
            <summary>
            Log's in the the game asynchronously
            </summary>
            <param name="useSecureConnection">
            If enabled, the connection will be secure, but if false
            the connection will be faster
            </param>
            <returns>True if logged in successfully; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidClient.LogOut">
            <summary>
            Logs out of the game
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.LogOutAsync">
            <summary>
            Logs out of the game asynchronously
            </summary>
        </member>
        <member name="M:Fluid.FluidClient.HasBlock(Fluid.Room.BlockID,System.Boolean)">
            <summary>
            Checks to see if the player has a block
            </summary>
            <param name="blockId">The block id</param>
            <param name="refreshPayvault">Whether to reload the payvault</param>
            <returns>True is the block is owned; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidClient.CountBlock(Fluid.Room.BlockID,System.Boolean)">
            <summary>
            Counts the amount of blocks owned
            </summary>
            <param name="blockId">The block id</param>
            <param name="refreshPayvault">Whether to reload the payvault</param>
            <returns>The number of blocks owned; -1 if no limit</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetBlockPack(Fluid.Room.BlockID)">
            <summary>
            Gets the corresponding block pack of a block
            </summary>
            <param name="blockId">The block id</param>
            <returns>The block pack name</returns>
        </member>
        <member name="M:Fluid.FluidClient.HasSmiley(Fluid.FaceID)">
            <summary>
            Checks to see if the player has a smiley
            </summary>
            <param name="smiley">The smiley</param>
            <returns></returns>
        </member>
        <member name="M:Fluid.FluidClient.GetSmileyPackName(Fluid.FaceID)">
            <summary>
            Gets the smiley's shop name
            </summary>
            <param name="smiley">The smiley</param>
        </member>
        <member name="M:Fluid.FluidClient.HasPotion(Fluid.Potion)">
            <summary>
            Gets if the user has a potion
            </summary>
            <param name="potion">The potion type</param>
        </member>
        <member name="M:Fluid.FluidClient.GetPotionCount(Fluid.Potion)">
            <summary>
            Gets the amount of potions owned
            </summary>
            <param name="potion">The potion type</param>
        </member>
        <member name="M:Fluid.FluidClient.GetPotionShopId(Fluid.Potion)">
            <summary>
            Gets the potion shop id
            </summary>
            <param name="potion">The potion type</param>
        </member>
        <member name="M:Fluid.FluidClient.JoinLobby">
            <summary>
            Creates a lobby connection
            </summary>
            <returns>The lobby connection</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetLobbyConnection">
            <summary>
            Joins the lobby
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluid.FluidClient.CreateWorldConnection(System.String)">
            <summary>
            Establishes a world connection
            </summary>
            <param name="worldId">The world id</param>
            <returns>The world connection</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetWorldConnection(System.String)">
            <summary>
            Creates a world connection
            </summary>
            <param name="worldUrlOrId">A full room url or just a world id</param>
            <returns>The connection established; otherwise null</returns>
        </member>
        <member name="M:Fluid.FluidClient.GetSecureConnection">
            <summary>
            Gets a secure connection used for authentication
            </summary>
            <returns>A secure connection if established; otherwise null</returns>
        </member>
        <member name="M:Fluid.FluidClient.#ctor(Fluid.IAuth)">
            <summary>
            Creates a new game connection
            </summary>
            <param name="auth">The authentication</param>
        </member>
        <member name="P:Fluid.FluidClient.Auth">
            <summary>
            Gets the authentication used to log in.
            </summary>
        </member>
        <member name="P:Fluid.FluidClient.Config">
            <summary>
            Gets or sets the configuration
            </summary>
        </member>
        <member name="P:Fluid.FluidClient.Log">
            <summary>
            Gets the log of messages
            </summary>
        </member>
        <member name="P:Fluid.FluidClient.ConnectedPlayer">
            <summary>
            Gets the current logged in player
            </summary>
        </member>
        <member name="P:Fluid.FluidClient.PlayerDatabase">
            <summary>
            Gets the player database
            </summary>
        </member>
        <member name="P:Fluid.FluidClient.ConnectionValue">
            <summary>
            Gets the connection value
            </summary>
        </member>
        <member name="P:Fluid.FluidClient.ConnectionUserId">
            <summary>
            Gets the connection user id
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.GetLabValues">
            <summary>
            Gets the color's L*A*B* values
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.CIE76(Fluid.FluidColor)">
            <summary>
            Implements the CIE76 method of delta-e: http://en.wikipedia.org/wiki/Color_difference#CIE76
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.CIE94(Fluid.FluidColor)">
            <summary>
            Implements the Cie94 method of delta-e: http://en.wikipedia.org/wiki/Color_difference#CIE94
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.CIEDE2000(Fluid.FluidColor)">
            <summary>
            Implements the DE2000 method of delta-e: http://en.wikipedia.org/wiki/Color_difference#CIEDE2000
            Correct implementation provided courtesy of Jonathan Hofinger, jaytar42
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.Cmc(Fluid.FluidColor)">
            <summary>
            Implements the CMC l:c (1984) method of delta-e: http://en.wikipedia.org/wiki/Color_difference#CMC_l:c_.281984.29
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.Compare``1(Fluid.ComparisonMethod,System.Func{``0,Fluid.FluidColor},``0[])">
            <summary>
            Compares this color to other colors and calculates the most similiar color
            </summary>
            <param name="method">The method for comparision</param>
            <param name="colors">The list of colors</param>
            <returns>The most similiar color</returns>
        </member>
        <member name="M:Fluid.FluidColor.Compare(Fluid.ComparisonMethod,Fluid.FluidColor[])">
            <summary>
            Compares this color to other colors and calculates the most similiar color
            </summary>
            <param name="method">The method for comparision</param>
            <param name="colors">The list of colors</param>
            <returns>The most similiar color</returns>
        </member>
        <member name="M:Fluid.FluidColor.Invert">
            <summary>
            Gets the inverse of the color
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluid.FluidColor.GetBrightness">
            <summary>
            Gets the brightness of the color
            </summary>
            <returns>The brightness of the color</returns>
        </member>
        <member name="M:Fluid.FluidColor.GetHue">
            <summary>
            Gets the hue of the color
            </summary>
            <returns>The hue of the color</returns>
        </member>
        <member name="M:Fluid.FluidColor.GetSaturation">
            <summary>
            Gets the saturation of the color
            </summary>
            <returns>The saturation of the color</returns>
        </member>
        <member name="M:Fluid.FluidColor.Lerp(Fluid.FluidColor,System.Double)">
            <summary>
            Linearly interpolates the color with another color
            </summary>
            <param name="color">The color</param>
            <param name="amount">The amount; a rate or time between 0 and 1</param>
        </member>
        <member name="M:Fluid.FluidColor.GetHtmlSegment(System.Byte)">
            <summary>
            Gets a hex color segment
            </summary>
            <param name="b">The byte</param>
            <returns>The hex color segment</returns>
        </member>
        <member name="M:Fluid.FluidColor.ToHtml">
            <summary>
            Converts the color into an html color string
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.ToArgb">
            <summary>
            Converts the color to argb
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.Equals(System.Object)">
            <summary>
            Tests if this is equal to an object
            </summary>
            <param name="obj">The object</param>
        </member>
        <member name="M:Fluid.FluidColor.GetHashCode">
            <summary>
            Gets the Fluid color hashcode
            </summary>
        </member>
        <member name="M:Fluid.FluidColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new Fluid color
            </summary>
            <param name="r">The red value</param>
            <param name="g">The green value</param>
            <param name="b">The blue value</param>
        </member>
        <member name="M:Fluid.FluidColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new Fluid color
            </summary>
            <param name="a">The alpha value</param>
            <param name="r">The red value</param>
            <param name="g">The green value</param>
            <param name="b">The blue value</param>
        </member>
        <member name="M:Fluid.FluidColor.#ctor(System.Int64)">
            <summary>
            Creates a new Fluid color
            </summary>
            <param name="argb">Argb value</param>
        </member>
        <member name="M:Fluid.FluidColor.#ctor(System.String)">
            <summary>
            Creates a new Fluid color
            </summary>
            <param name="hexColor">The hexadecimal color string</param>
        </member>
        <member name="P:Fluid.FluidColor.R">
            <summary>
            Gets or sets the red value
            </summary>
        </member>
        <member name="P:Fluid.FluidColor.G">
            <summary>
            Gets or sets the green value
            </summary>
        </member>
        <member name="P:Fluid.FluidColor.B">
            <summary>
            Gets or sets the blue value
            </summary>
        </member>
        <member name="P:Fluid.FluidColor.A">
            <summary>
            Gets or sets the alpha value
            </summary>
        </member>
        <member name="F:Fluid.ConnectionBase.m_Client">
            <summary>
            The fluid client
            </summary>
        </member>
        <member name="F:Fluid.ConnectionBase.m_MessageHandlers">
            <summary>
            The list of core message processors
            </summary>
        </member>
        <member name="F:Fluid.ConnectionBase.m_MessageAwaiters">
            <summary>
            The list of core message awaiters
            </summary>
        </member>
        <member name="F:Fluid.ConnectionBase.m_GroupServerEventHandlers">
            <summary>
            The list of group server event handlers
            </summary>
        </member>
        <member name="F:Fluid.ConnectionBase.m_ServerEventHandlers">
            <summary>
            The list of server event handlers
            </summary>
        </member>
        <member name="F:Fluid.ConnectionBase.m_EventHandlers">
            <summary>
            The list of event handlers
            </summary>
        </member>
        <member name="M:Fluid.ConnectionBase.SendMessage(System.String,System.Object[])">
            <summary>
            Sends a message
            </summary>
            <param name="type">The message type</param>
            <param name="parameters">The message parameters</param>
        </member>
        <member name="M:Fluid.ConnectionBase.SendMessage(PlayerIOClient.Message)">
            <summary>
            Sends a message
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Fluid.ConnectionBase.Disconnect">
            <summary>
            Disconnects the connection
            </summary>
        </member>
        <member name="M:Fluid.ConnectionBase.RaiseEvent``1(``0)">
            <summary>
            Invokes a server event
            </summary>
            <typeparam name="T">The server event</typeparam>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.ConnectionBase.RaiseEventAsync``1(``0)">
            <summary>
            Invokes a server event asynchronously
            </summary>
            <typeparam name="T">The event type</typeparam>
            <param name="message">The message</param>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:Fluid.ConnectionBase.RaiseServerEvent``1(``0)">
            <summary>
            Invokes a event
            </summary>
            <typeparam name="T">The event</typeparam>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.ConnectionBase.RaiseServerEventAsync``1(``0)">
            <summary>
            Invokes a event asynchronously
            </summary>
            <typeparam name="T">The server event type</typeparam>
            <param name="message">The message</param>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:Fluid.ConnectionBase.WaitForServerEvent``1">
            <summary>
            Waits for a message to be received
            </summary>
            <typeparam name="T">Message type</typeparam>
            <returns>The message type</returns>
        </member>
        <member name="M:Fluid.ConnectionBase.WaitForServerEvent``1(System.Int32)">
            <summary>
            Waits for a message to be received
            </summary>
            <typeparam name="T">Message type</typeparam>
            <returns>The message type</returns>
            <param name="timeout">The timeout in milliseconds</param>
        </member>
        <member name="M:Fluid.ConnectionBase.AddServerEventHandlers(System.EventHandler{Fluid.ServerEvents.IServerEvent},System.Type[])">
            <summary>
            Adds a group of server event handlers
            </summary>
            <param name="handler">The server event handler</param>
            <param name="types">The types of handlers to group</param>
        </member>
        <member name="M:Fluid.ConnectionBase.AddServerEventHandler``1(Fluid.FluidEventHandler{``0})">
            <summary>
            Adds a Fluid server event handler
            </summary>
            <typeparam name="T">The server event type</typeparam>
            <param name="eventHandler">The Fluid event handler</param>
        </member>
        <member name="M:Fluid.ConnectionBase.AddEventHandler``1(System.EventHandler{``0})">
            <summary>
            Adds a regular event handler
            </summary>
            <typeparam name="T">The event type</typeparam>
            <param name="eventHandler">The event handler</param>
        </member>
        <member name="M:Fluid.ConnectionBase.RemoveEventHandler``1">
            <summary>
            Removes a event handler
            </summary>
            <typeparam name="T">Event type</typeparam>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:Fluid.ConnectionBase.RemoveServerEventHandler``1">
            <summary>
            Removes a fluid server event handler
            </summary>
            <typeparam name="T">ServerEvent type</typeparam>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:Fluid.ConnectionBase.MessageProcessor(System.Object,PlayerIOClient.Message)">
            <summary>
            Processes a message received from the server
            </summary>
            <param name="sender">The sender</param>
            <param name="m">The playerio message</param>
        </member>
        <member name="M:Fluid.ConnectionBase.DisconnectProcessor(System.Object,System.String)">
            <summary>
            Processes a disconnection message received from the server
            </summary>
            <param name="sender">The sender</param>
            <param name="message">The disconnection reason</param>
        </member>
        <member name="M:Fluid.ConnectionBase.Shutdown">
            <summary>
            Shutdown immediate active resources
            </summary>
        </member>
        <member name="M:Fluid.ConnectionBase.Reconnect">
            <summary>
            Attempts to re establish the connection
            </summary>
        </member>
        <member name="M:Fluid.ConnectionBase.AddMessageHandler(Fluid.Handlers.IMessageHandler)">
            <summary>
            Adds a message handler for the connection to use
            </summary>
            <param name="messageHandler">The message handler</param>
        </member>
        <member name="M:Fluid.ConnectionBase.SetConnection(PlayerIOClient.Connection)">
            <summary>
            Sets the connection
            </summary>
            <param name="connection">The playerio connection</param>
        </member>
        <member name="M:Fluid.ConnectionBase.#ctor(Fluid.FluidClient)">
            <summary>
            Creates a new Fluid connection base
            </summary>
            <param name="client">The Fluid client</param>
        </member>
        <member name="M:Fluid.ConnectionBase.#ctor(Fluid.FluidClient,PlayerIOClient.Connection)">
            <summary>
            Creates a new Fluid connection base
            </summary>
            <param name="client">The Fluid client</param>
            <param name="connection">The playerio connection</param>
        </member>
        <member name="E:Fluid.ConnectionBase.OnPlayerIOMessage">
            <summary>
            The event for incoming playerio messages
            </summary>
        </member>
        <member name="P:Fluid.ConnectionBase.Connected">
            <summary>
            Gets whether the connection is alive
            </summary>
        </member>
        <member name="P:Fluid.ConnectionBase.Client">
            <summary>
            Gets the client used to establish the connection
            </summary>
        </member>
        <member name="T:Fluid.FluidEventHandler`1">
            <summary>
            Creates a new Fluid event handler
            </summary>
            <typeparam name="T">The type of message</typeparam>
            <param name="connection">The connection</param>
            <param name="eventMessage">The message</param>
        </member>
        <member name="F:Fluid.Input.Nothing">
            <summary>
            No input
            </summary>
        </member>
        <member name="F:Fluid.Input.HoldLeft">
            <summary>
            Holding left
            </summary>
        </member>
        <member name="F:Fluid.Input.HoldUp">
            <summary>
            Holding up
            </summary>
        </member>
        <member name="F:Fluid.Input.HoldRight">
            <summary>
            Holding right
            </summary>
        </member>
        <member name="F:Fluid.Input.HoldDown">
            <summary>
            Holding down
            </summary>
        </member>
        <member name="F:Fluid.Input.HoldSpace">
            <summary>
            Holding space
            </summary>
        </member>
        <member name="F:Fluid.Input.ReleaseLeft">
            <summary>
            Releasing left
            </summary>
        </member>
        <member name="F:Fluid.Input.ReleaseUp">
            <summary>
            Releasing up
            </summary>
        </member>
        <member name="F:Fluid.Input.ReleaseRight">
            <summary>
            Releasing right
            </summary>
        </member>
        <member name="F:Fluid.Input.ReleaseDown">
            <summary>
            Releasing down
            </summary>
        </member>
        <member name="F:Fluid.Input.ReleaseSpace">
            <summary>
            Releasing space
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.Join">
            <summary>
            Joins the lobby
            </summary>
            <returns>Returns the lobby connection for code chaining</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestLobbyProperties">
            <summary>
            Requests lobby properties from the server
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetLobbyProperties">
            <summary>
            Gets the lobby's properties
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestPlayerObject">
            <summary>
            Requests the players simple object
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetPlayerObject">
            <summary>
            Gets player object
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestProfile(System.String)">
            <summary>
            Requests a player's profile
            </summary>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.LobbyConnection.GetProfile(System.String)">
            <summary>
            Gets a player's profile
            </summary>
            <param name="username">The username</param>
            <returns>the player profile if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestShop">
            <summary>
            Requests the shop
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetShop">
            <summary>
            Gets the shop
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestUseEnergy(Fluid.VaultShopItem)">
            <summary>
            Requests to use energy on a shop item
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestUseEnergy(System.String)">
            <summary>
            Use's energy on a shop item
            </summary>
            <param name="shopItemId">The shop item id</param>       
        </member>
        <member name="M:Fluid.LobbyConnection.UseEnergy(Fluid.VaultShopItem)">
            <summary>
            Requests to use energy on a 
            </summary>
            <param name="item">The item</param>
            <returns>Whether the energy was spent</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.UseEnergy(System.String)">
            <summary>
            Use's energy on a shop item
            </summary>
            <param name="shopItemId"></param>
            <returns>Whether the energy was spent</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestUseGems(Fluid.VaultShopItem)">
            <summary>
            Use's gems on a shop item
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestUseGems(System.String)">
            <summary>
            Use's gems on a shop item
            </summary>
            <param name="shopItemId">The shop item id</param>
        </member>
        <member name="M:Fluid.LobbyConnection.UseGems(Fluid.VaultShopItem)">
            <summary>
            Use's gems on a shop item
            </summary>
            <param name="item">The item</param>
            <returns>Whether gems were spent</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.UseGems(System.String)">
            <summary>
            Use's gems on a shop item
            </summary>
            <param name="shopItemId">The item</param>
            <returns>Whether gems were spent</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestBlocked">
            <summary>
            Requests the player's blocked users
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetBlocked">
            <summary>
            Gets the player's blocked users
            </summary>
            <returns>The list of blocked friends</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestPending">
            <summary>
            Requests the list of pending friend requests
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetPending">
            <summary>
            Gets the player's pending friends
            </summary>
            <returns>The list of pending friends</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestFriends">
            <summary>
            Requests the list of friends
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetFriends">
            <summary>
            Gets the player's friends
            </summary>
            <returns>The list of friends</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestAllInvites">
            <summary>
            Requests to get all invites to the player
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetAllInvites">
            <summary>
            Gets all friend invites
            </summary>
            <returns>The list of friend invites</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.DeleteFriend(Fluid.Friend)">
            <summary>
            Deletes a friend
            </summary>
            <param name="friend">The friend</param>
        </member>
        <member name="M:Fluid.LobbyConnection.DeleteFriend(System.String)">
            <summary>
            Deletes a friend
            </summary>
            <param name="username">The friend's username</param>
        </member>
        <member name="M:Fluid.LobbyConnection.DeletePending(Fluid.Friend)">
            <summary>
            Deletes a pending friend
            </summary>
            <param name="friend">The pending friend</param>
        </member>
        <member name="M:Fluid.LobbyConnection.DeletePending(System.String)">
            <summary>
            Deletes a pending friend
            </summary>
            <param name="username">The pending friend's username</param>
        </member>
        <member name="M:Fluid.LobbyConnection.CreateInvite(System.String)">
            <summary>
            Creates a new friend invite
            </summary>
            <param name="emailAddress">The email address</param>
        </member>
        <member name="M:Fluid.LobbyConnection.AcceptInvite(System.String)">
            <summary>
            Accepts a friend invite
            </summary>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.LobbyConnection.DenyInvite(System.String)">
            <summary>
            Denies a friend invite
            </summary>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.LobbyConnection.BlockInvite(System.String)">
            <summary>
            Blocks a friend invite
            </summary>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.LobbyConnection.UnBlockInvite(System.String)">
            <summary>
            Un-Blocks a blocked friend invite
            </summary>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestProfileVisibility">
            <summary>
            Requests to get the profile visibility
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.GetProfileVisibility">
            <summary>
            Gets the player's visibility of their profile
            </summary>
            <returns>True if public; false if private</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.RequestToggleProfileVisibility">
            <summary>
            Requests to toggle the profile visibility
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.ToggleProfileVisibility">
            <summary>
            Toggles the profile's visibility
            </summary>
            <returns>True if public; false if private</returns>
        </member>
        <member name="M:Fluid.LobbyConnection.SetProfileVisibility(Fluid.ProfileVisibility)">
            <summary>
            Sets the player's profile visibility
            </summary>
            <param name="profileVisibility">The profile visibility</param>
        </member>
        <member name="M:Fluid.LobbyConnection.SetProfileVisibility(System.Boolean)">
            <summary>
            Sets the player's profile visibility
            </summary>
            <param name="requestedVisibility">The profile visibility</param>
        </member>
        <member name="M:Fluid.LobbyConnection.Reconnect">
            <summary>
            Trys to reestablish the lobby connection
            </summary>
        </member>
        <member name="M:Fluid.LobbyConnection.#ctor(Fluid.FluidClient)">
            <summary>
            Creates a new Fluid lobby connection
            </summary>
            <param name="client">The Fluid client</param>
        </member>
        <member name="P:Fluid.LobbyConnection.Timeout">
            <summary>
            Gets the lobby connection event timeout
            </summary>
        </member>
        <member name="P:Fluid.LobbyConnection.MessageOfTheDay">
            <summary>
            Gets the message of the day
            </summary>
        </member>
        <member name="M:Fluid.FluidLog.GetAllMessages">
            <summary>
            Get's all log messages
            </summary>
        </member>
        <member name="M:Fluid.FluidLog.GetAllMessages(Fluid.FluidLogCategory)">
            <summary>
            Get's all messages from a category
            </summary>
            <param name="category">The category</param>
        </member>
        <member name="M:Fluid.FluidLog.Add(Fluid.FluidLogCategory,System.String)">
            <summary>
            Log's a message
            </summary>
            <param name="category">The message category</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Fluid.FluidLog.Clear">
            <summary>
            Clears the log
            </summary>
        </member>
        <member name="M:Fluid.FluidLog.#ctor">
            <summary>
            Creates a new Fluid log
            </summary>
        </member>
        <member name="M:Fluid.FluidLog.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new Fluid log
            </summary>
            <param name="output">The output writer</param>
        </member>
        <member name="P:Fluid.FluidLog.Count">
            <summary>
            Gets the log count
            </summary>
        </member>
        <member name="P:Fluid.FluidLog.Last">
            <summary>
            Gets the last log message; null if no messages have been logged
            </summary>
        </member>
        <member name="P:Fluid.FluidLog.Output">
            <summary>
            Gets or sets the log output
            </summary>
        </member>
        <member name="E:Fluid.FluidLog.OnMessage">
            <summary>
            Adds or removes the on message event
            </summary>
        </member>
        <member name="F:Fluid.FluidLogCategory.Fail">
            <summary>
            Preventable fail
            </summary>
        </member>
        <member name="F:Fluid.FluidLogCategory.Suggestion">
            <summary>
            Suggestion
            </summary>
        </member>
        <member name="F:Fluid.FluidLogCategory.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:Fluid.FluidLogMessage.#ctor(System.String,System.Diagnostics.StackTrace,Fluid.FluidLogCategory)">
            <summary>
            Creates new a new Fluid log message
            </summary>
            <param name="text">The message text</param>
            <param name="trace">The stack trace</param>
            <param name="category">The category</param>
        </member>
        <member name="P:Fluid.FluidLogMessage.Text">
            <summary>
            Gets the log message's text
            </summary>
        </member>
        <member name="P:Fluid.FluidLogMessage.Category">
            <summary>
            Gets or Sets the Fluid log category
            </summary>
        </member>
        <member name="P:Fluid.FluidLogMessage.Trace">
            <summary>
            Gets the log message's stack trace
            </summary>
        </member>
        <member name="T:Fluid.FluidParser">
            <summary>
            Fluid Parser Utilities
            </summary>
        </member>
        <member name="M:Fluid.FluidParser.Parse(System.String,System.String@)">
            <summary>
            Trys to parse a url or id
            </summary>
        </member>
        <member name="M:Fluid.FluidParser.IsValidStrictRoomId(System.String)">
            <summary>
            Check if the string is a valid room id
            </summary>
        </member>
        <member name="M:Fluid.FluidParser.IsBeta(System.String)">
            <summary>
            Checks if the world id is a beta room
            </summary>
            <param name="id">The world id</param>
            <returns>true if the world id is beta; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.CheckIfOpen">
            <summary>
            Checks if the database connection is open
            </summary>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.ExecuteQuery(System.String)">
            <summary>
            Executes a sql lite query
            </summary>
            <param name="commandText">The command text</param>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.ExecuteNonQuery(System.String)">
            <summary>
            Executes a sql lite command
            </summary>
            <param name="commandText">The command text</param>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.GetUsername(System.String)">
            <summary>
            Looks up the username to a corresponding connection id
            </summary>
            <param name="connectionId">The connection id</param>
            <returns>The username if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.Add(System.String,System.String)">
            <summary>
            Adds a entry to the database
            </summary>
            <param name="username">The username</param>
            <param name="connectionId">The connection id</param>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.Set(System.String,System.String)">
            <summary>
            Sets the value in the database
            </summary>
            <param name="connectionId">The connection id of the user to change</param>
            <param name="username">The new username</param>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.GetConnectionId(System.String)">
            <summary>
            Looks up the connection id to a corresponding username
            </summary>
            <param name="username">The username</param>
            <returns>The connection id if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.Connect(Fluid.FluidToolbelt,System.String)">
            <summary>
            Connects to the player id database
            </summary>
            <param name="toolBelt">The Fluid toolbelt</param>
            <param name="path"></param>
        </member>
        <member name="M:Fluid.FluidPlayerDatabase.#ctor(Fluid.FluidClient,Fluid.FluidLog)">
            <summary>
            Creates a new Fluid player database
            </summary>
            <param name="client">The client</param>
            <param name="logger">The Fluid logger</param>
        </member>
        <member name="P:Fluid.FluidPlayerDatabase.Connected">
            <summary>
            Gets whether the connection is established
            </summary>
        </member>
        <member name="M:Fluid.FluidPoint.DistanceTo(Fluid.FluidPoint)">
            <summary>
            Gets the distance to another point
            </summary>
            <param name="p">The point</param>
            <returns>The distance</returns>
        </member>
        <member name="M:Fluid.FluidPoint.ToVector">
            <summary>
            Converts this point into a vector
            </summary>
            <returns>The vector</returns>
        </member>
        <member name="M:Fluid.FluidPoint.Equals(Fluid.FluidPoint)">
            <summary>
            Checks if this point is equal to another point
            </summary>
            <param name="p">The point</param>
            <returns>True if equal; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new point
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
        </member>
        <member name="P:Fluid.FluidPoint.X">
            <summary>
            Gets the x component
            </summary>
        </member>
        <member name="P:Fluid.FluidPoint.Y">
            <summary>
            Gets the y component
            </summary>
        </member>
        <member name="M:Fluid.WorldReference.Load">
            <summary>
            Loads the world
            </summary>
            <returns>The world if valid; otherwise null</returns>
        </member>
        <member name="M:Fluid.WorldReference.#ctor(Fluid.FluidClient,System.String)">
            <summary>
            Creates a new world reference
            </summary>
            <param name="client">The Fluid client</param>
            <param name="worldId">The world id</param>
        </member>
        <member name="P:Fluid.WorldReference.WorldID">
            <summary>
            Gets the world id
            </summary>
        </member>
        <member name="M:Fluid.LobbyWorldReference.#ctor(Fluid.FluidClient,System.String,System.Int32)">
            <summary>
            Creates a new lobby world reference
            </summary>
            <param name="client">The client</param>
            <param name="worldID">The world id</param>
            <param name="onlineUsers">The amount of online users</param>
        </member>
        <member name="P:Fluid.LobbyWorldReference.OnlineUsers">
            <summary>
            Gets the amount of online users
            </summary>
        </member>
        <member name="P:Fluid.LobbyWorldReference.Owned">
            <summary>
            Gets whether the world is owned
            </summary>
        </member>
        <member name="P:Fluid.LobbyWorldReference.NeedsKey">
            <summary>
            Gets whether the world needs a key
            </summary>
        </member>
        <member name="P:Fluid.LobbyWorldReference.Plays">
            <summary>
            Gets the amount of plays the world has
            </summary>
        </member>
        <member name="P:Fluid.LobbyWorldReference.Rating">
            <summary>
            Gets the rating of the world
            </summary>
        </member>
        <member name="P:Fluid.LobbyWorldReference.Name">
            <summary>
            Gets the name of the world
            </summary>
        </member>
        <member name="P:Fluid.LobbyWorldReference.Woots">
            <summary>
            Gets the amount of woots the world has
            </summary>
        </member>
        <member name="P:Fluid.LobbyWorldReference.IsFeatured">
            <summary>
            Gets whether the world is featured
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEventMode.Send">
            <summary>
            Sends all keys and touches, etc. to the server
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEventMode.Ignore">
            <summary>
            Ignores all keys and touches, etc.
            </summary>
        </member>
        <member name="F:Fluid.Physics.TickMode.RealTime">
            <summary>
            Attempts to keep up with the actual realtime action of the world
            </summary>
        </member>
        <member name="F:Fluid.Physics.TickMode.Local">
            <summary>
            Keeps at a local pace but behind the world's time
            </summary>
        </member>
        <member name="F:Fluid.PotionState.Active">
            <summary>
            The potion is active
            </summary>
        </member>
        <member name="F:Fluid.PotionState.Suspended">
            <summary>
            The potion is suspended due to the world changing their policy
            </summary>
        </member>
        <member name="F:Fluid.PotionState.Inactive">
            <summary>
            The potion is inactive
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Unknown">
            <summary>
            A unknown quick chat message
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Left">
            <summary>
            "Left."
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Hi">
            <summary>
            "Hi."
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Bye">
            <summary>
            "Goodbye."
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Help">
            <summary>
            "Help me!"
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Thanks">
            <summary>
            "Thank you."
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Come">
            <summary>
            "Follow me."
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Stop">
            <summary>
            "Stop!"
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Yes">
            <summary>
            "Yes."
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.No">
            <summary>
            "No."
            </summary>
        </member>
        <member name="F:Fluid.QuickChatMessage.Right">
            <summary>
            "Right."
            </summary>
        </member>
        <member name="M:Fluid.FluidRect.Center">
            <summary>
            Gets the center of the rectangle
            </summary>
            <returns>The center point</returns>
        </member>
        <member name="M:Fluid.FluidRect.Intersects(Fluid.FluidRect)">
            <summary>
            Checks if this rectangle intersects with another rectangle
            </summary>
            <param name="rect">The rectangle to check</param>
            <returns>True is they intersect; otherwise false</returns>
        </member>
        <member name="M:Fluid.FluidRect.Contains(Fluid.FluidPoint)">
            <summary>
            Checks if a point is within this rectangle
            </summary>
            <param name="point">The point</param>
            <returns>True if the point is within this rectangle</returns>
        </member>
        <member name="M:Fluid.FluidRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new rectangle
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
        </member>
        <member name="M:Fluid.FluidRect.#ctor(Fluid.FluidPoint,System.Int32,System.Int32)">
            <summary>
            Creates a new rectangle
            </summary>
            <param name="p">The location</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
        </member>
        <member name="M:Fluid.FluidRect.#ctor(Fluid.FluidPoint,Fluid.FluidPoint)">
            <summary>
            Creates a new rectangle
            </summary>
            <param name="p">The top-left location</param>
            <param name="e">The bottom-right location</param>
        </member>
        <member name="P:Fluid.FluidRect.X">
            <summary>
            Gets or sets the x coordinate
            </summary>
        </member>
        <member name="P:Fluid.FluidRect.Y">
            <summary>
            Gets or sets the y coordinate
            </summary>
        </member>
        <member name="P:Fluid.FluidRect.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:Fluid.FluidRect.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="M:Fluid.SecureConnection.SendAuth(System.String,System.String)">
            <summary>
            Sends a authentication request
            </summary>
            <param name="userId">The user id</param>
            <param name="authToken">The authentication token</param>
        </member>
        <member name="M:Fluid.SecureConnection.#ctor(Fluid.FluidClient,PlayerIOClient.Connection)">
            <summary>
            Creates a new Fluid lobby connection
            </summary>
            <param name="client">The Fluid client</param>
            <param name="connection">The playerio connection</param>
        </member>
        <member name="M:Fluid.ItemInfo.GetDefaultBlocks">
            <summary>
            Gets a list of default blocks
            </summary>
        </member>
        <member name="M:Fluid.ItemInfo.GetAllIDs">
            <summary>
            Gets all block ids
            </summary>
            <returns>The list of all block ids</returns>
        </member>
        <member name="M:Fluid.ItemInfo.GetBlockPack(Fluid.Room.BlockID)">
            <summary>
            Gets the corresponding block pack to a block id
            </summary>
            <param name="blockId">The block id</param>
            <returns>The corresponding block pack if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.ItemInfo.GetSmileyId(Fluid.FaceID)">
            <summary>
            Gets the smiley shop id
            </summary>
            <param name="smiley">The smiley</param>
        </member>
        <member name="M:Fluid.ItemInfo.GetMinimapColor(Fluid.Room.BlockID)">
            <summary>
            Gets the minimap color that a block produces
            </summary>
            <param name="blockId">The block id</param>
            <returns>The minimap color if known; otherwise null</returns>
        </member>
        <member name="M:Fluid.ItemInfo.GetBlockImage(Fluid.Room.BlockID)">
            <summary>
            Gets the block image for a block id
            </summary>
            <param name="blockId">The block id</param>
            <returns>The block image if known; otherwise null</returns>
        </member>
        <member name="M:Fluid.ItemInfo.Color(Fluid.Room.BlockID)">
            <summary>
            Gets the minimap color of this id
            </summary>
        </member>
        <member name="M:Fluid.ItemInfo.#cctor">
            <summary>
            Creates the shop info
            </summary>
        </member>
        <member name="M:Fluid.FluidToolbelt.RunSafe``1(Fluid.UnsafeAction{``0})">
            <summary>
            Run's a unsafe action
            </summary>
            <param name="method">Unsafe method</param>
        </member>
        <member name="M:Fluid.FluidToolbelt.RunSafe(System.Action)">
            <summary>
            Run's a unsafe method and returns the whether successful
            </summary>
            <param name="method">Unsafe method to run</param>
            <returns>True if successful; false otherwise</returns>
        </member>
        <member name="M:Fluid.FluidToolbelt.GetValueIfExists``1(PlayerIOClient.VaultItem,System.String)">
            <summary>
            Gets the value of a property in a vault item
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="vaultItem">The vault item</param>
            <param name="property">The property</param>
        </member>
        <member name="M:Fluid.FluidToolbelt.GetValueIfExists(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Gets the value of a property in a vault item
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="property">The property</param>
        </member>
        <member name="M:Fluid.FluidWire.GetAddressBytes(PcapDotNet.Packets.IpV4.IpV4Address)">
            <summary>
            Gets the address's bytes
            </summary>
            <param name="address">The IPV4 address</param>
        </member>
        <member name="M:Fluid.FluidWire.GetAddresses(System.Uri)">
            <summary>
            Gets the player io api service's ip address
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluid.FluidWire.IsMatchingAddress(PcapDotNet.Packets.IpV4.IpV4Address)">
            <summary>
            Chceks if the IPV4 Address is the player io api
            </summary>
            <param name="address">The IPV4 Address</param>
        </member>
        <member name="M:Fluid.FluidWire.SniffQuery(System.String,System.Int32)">
            <summary>
            Sniff's for a url query
            </summary>
            <param name="relativeUri">The relative uri</param>
            <param name="timeout">The timeout in milliseconds</param>
            <returns>The parsed query; otherwise null</returns>
        </member>
        <member name="M:Fluid.FluidWire.StartSniffingRequests(System.Uri)">
            <summary>
            Start asyncronously sniffing playerio api requests 
            </summary>
        </member>
        <member name="M:Fluid.FluidWire.CreateAndStartThread">
            <summary>
            Creates and starts a sniffing thread
            </summary>
        </member>
        <member name="M:Fluid.FluidWire.StopSniffingRequests">
            <summary>
            Stops sniffing for player io requests
            </summary>
        </member>
        <member name="M:Fluid.FluidWire.SniffRequests">
            <summary>
            Sniffing thread
            </summary>
        </member>
        <member name="M:Fluid.FluidWire.SniffPacketHandler(PcapDotNet.Packets.Packet)">
            <summary>
            Handles a player io request
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Fluid.FluidWire.PacketQueryHandler(PcapDotNet.Packets.Packet)">
            <summary>
            Packet handler
            </summary>
            <param name="packet">The packet to handle</param>
        </member>
        <member name="M:Fluid.FluidWire.Open">
            <summary>
            Opens the wire
            </summary>
            <returns>If the task was successful</returns>
        </member>
        <member name="M:Fluid.FluidWire.Dispose">
            <summary>
            Disposes the wire communicator
            </summary>
        </member>
        <member name="M:Fluid.FluidWire.#ctor(Fluid.FluidLog)">
            <summary>
            Creates a packet sniffer
            </summary>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Fluid.FluidWire.Finalize">
            <summary>
            Destroys the wire
            </summary>
        </member>
        <member name="P:Fluid.FluidWire.PlayerIOServerLag">
            <summary>
            Gets the playerio server lag
            </summary>
        </member>
        <member name="P:Fluid.FluidWire.SniffingRequests">
            <summary>
            Gets if currently sniffing requests
            </summary>
        </member>
        <member name="E:Fluid.FluidWire.OnPlayerIORequestSniffed">
            <summary>
            The event for when playerio request was sniffed
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.PrivateMessageEvent">
            <summary>
            The server event for when a private message is received
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.IServerEvent">
            <summary>
            The message interface
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.IServerEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PrivateMessageEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PrivateMessageEvent.ChatMessage">
            <summary>
            Gets the chat message
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.JoinInternal(System.Int32)">
            <summary>
            Joins the world
            </summary>
            <param name="attempt">The number of attempts passed</param>
            <returns>The current world connection</returns>
        </member>
        <member name="M:Fluid.WorldConnection.Join">
            <summary>
            Joins the world
            </summary>
            <returns>The connection for chaining your code if necessary</returns>
        </member>
        <member name="M:Fluid.WorldConnection.CheckThrottle">
            <summary>
            Checks the current block throttle
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.ActivateKey(Fluid.Room.Key,System.Int32,System.Int32)">
            <summary>
            Activates a key
            </summary>
            <param name="key">The key to activate</param>
            <param name="blockX">The key's x coordinate</param>
            <param name="blockY">The key's y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlock(Fluid.Room.BlockID,System.Int32,System.Int32)">
            <summary>
            Sends a block to the world synchronouslyu
            </summary>
            <param name="id">The block id</param>
            <param name="layer">The layer</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlock(Fluid.Room.BlockID,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a block to the world
            </summary>
            <param name="id">The block id</param>
            <param name="layer">The layer</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="blockThrottle">The speed at which to upload the block in milliseconds</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlock(Fluid.Room.Block)">
            <summary>
            Sends a block to the world
            </summary>
            <param name="block">The block to send</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlock(Fluid.Room.Block,System.Int32)">
            <summary>
            Sends the block at a specific speed
            </summary>
            <param name="block">The block to send</param>
            <param name="blockThrottle">The speed at which to upload the block in milliseconds</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlockAsync(Fluid.Room.BlockID,System.Int32,System.Int32)">
            <summary>
            Sends a block to the world
            </summary>
            <param name="id">The block id</param>
            <param name="layer">The layer</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlockAsync(Fluid.Room.BlockID,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a block to the world
            </summary>
            <param name="id">The block id</param>
            <param name="layer">The layer</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="blockThrottle">The speed at which to upload the block in milliseconds</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlockAsync(Fluid.Room.Block)">
            <summary>
            Sends a block to the world
            </summary>
            <param name="block">The block to send</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlockAsync(Fluid.Room.Block,System.Int32)">
            <summary>
            Sends the block at a specific speed
            </summary>
            <param name="block">The block to send</param>
            <param name="blockThrottle">The speed at which to upload the block in milliseconds</param>
        </member>
        <member name="M:Fluid.WorldConnection.QueueBlock(Fluid.Room.Block,System.Int32)">
            <summary>
            Queues the block to be uploaded
            </summary>
            <param name="block">The block</param>
            <param name="blockThrottle">The speed to upload the block</param>
        </member>
        <member name="M:Fluid.WorldConnection.UploadBlockRequest(Fluid.BlockRequest)">
            <summary>
            Sends a block to the world
            </summary>
            <param name="blockRequest">The block to send</param>
        </member>
        <member name="M:Fluid.WorldConnection.CheckBlock(Fluid.Room.Block)">
            <summary>
            Checks the block to see 
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Fluid.WorldConnection.RequestAccess(System.String)">
            <summary>
            Requests access to edit
            </summary>
            <param name="code">The code</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetCode(System.String)">
            <summary>
            Sets the code to the level
            </summary>
            <param name="code">The code</param>
        </member>
        <member name="M:Fluid.WorldConnection.Clear">
            <summary>
            Clears the level
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.GetCrown(System.Int32,System.Int32)">
            <summary>
            Gives the crown to the connected player
            </summary>
            <param name="blockX">The crown's x coordinate</param>
            <param name="blockY">The crown's y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.GiveCrown(Fluid.WorldPlayer)">
            <summary>
            Gives a crown to a player
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:Fluid.WorldConnection.GiveCrown(System.String)">
            <summary>
            Gives a crown to a player
            </summary>
            <param name="username">The player's username</param>
        </member>
        <member name="M:Fluid.WorldConnection.RemoveCrown">
            <summary>
            Removes the crown from the crown holder
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.SetGodMode(Fluid.WorldPlayer,System.Boolean)">
            <summary>
            Sets a player's godmode on
            </summary>
            <param name="player">The world player</param>
            <param name="value">Value of godmode</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetGodMode(System.String,System.Boolean)">
            <summary>
            Sets a player's godmode on
            </summary>
            <param name="username">The player username</param>
            <param name="value">Value of godmode</param>
        </member>
        <member name="M:Fluid.WorldConnection.GetSilverCrown(System.Int32,System.Int32)">
            <summary>
            Gets the silver crown
            </summary>
            <param name="blockX">The silver crown's x coordinate</param>
            <param name="blockY">The silver crown's y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetTitle(System.String)">
            <summary>
            Sets the title to the level
            </summary>
            <param name="title">The title</param>
        </member>
        <member name="M:Fluid.WorldConnection.ChangeFace(Fluid.FaceID)">
            <summary>
            Changes the connected user's face
            </summary>
            <param name="face">The face id</param>
        </member>
        <member name="M:Fluid.WorldConnection.SaveWorld">
            <summary>
            Saves the world to the server database
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.WootUp">
            <summary>
            Sends a woot
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.SetGodMode(System.Boolean)">
            <summary>
            Sets the connected players god mode value
            </summary>
            <param name="value">True for god mode; False for no god mode</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetGuardianMode(System.Boolean)">
            <summary>
            Sets the connected players guardian mode value
            </summary>
            <param name="value">True for guardian mode; False for no guardian mode</param>
        </member>
        <member name="M:Fluid.WorldConnection.ToggleModeratorMode">
            <summary>
            Toggles the connected players moderator mode
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.SetAllowPotions(System.Boolean)">
            <summary>
            Sets if the world should allow potions
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.SetVisibility(System.Boolean)">
            <summary>
            Sets the visibility of the world
            </summary>
            <param name="visibility">The visibility</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetBackgroundColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the background color
            </summary>
            <param name="r">The red color value</param>
            <param name="g">The green color value</param>
            <param name="b">The blue color value</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetBackgroundColor(Fluid.FluidColor)">
            <summary>
            Sets the world's background color
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:Fluid.WorldConnection.LoadLevel">
            <summary>
            Loads the level to its latest saved state
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.Reset">
            <summary>
            Resets all players to the set spawn
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.KickPlayer(Fluid.WorldPlayer)">
            <summary>
            Kicks the player from the world
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:Fluid.WorldConnection.KickPlayer(Fluid.WorldPlayer,System.String)">
            <summary>
            Kicks the player from the world
            </summary>
            <param name="player">The player</param>
            <param name="reason">The reason shown the player why he/she was kicked</param>
        </member>
        <member name="M:Fluid.WorldConnection.TouchPlayer(Fluid.WorldPlayer,Fluid.Potion)">
            <summary>
            Touches the player with a potion
            </summary>
            <param name="player">The player</param>
            <param name="potion">The potion</param>
        </member>
        <member name="M:Fluid.WorldConnection.TouchCake(System.Int32,System.Int32)">
            <summary>
            Touches cake
            </summary>
            <param name="blockX">The block's x coordinate</param>
            <param name="blockY">The block's y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.TouchDiamond(System.Int32,System.Int32)">
            <summary>
            Touchs a diamond
            </summary>
            <param name="blockX">The block's x coordinate</param>
            <param name="blockY">The block's y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.TouchHologram(System.Int32,System.Int32)">
            <summary>
            Touchs a hologram
            </summary>
            <param name="blockX">The block's x coordinate</param>
            <param name="blockY">The block's y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.TouchCheckpoint(System.Int32,System.Int32)">
            <summary>
            Touchs a checkpoint
            </summary>
            <param name="blockX">The block's x coordinate</param>
            <param name="blockY">The block's y coordinate</param>
        </member>
        <member name="M:Fluid.WorldConnection.ActivatePotion(Fluid.Potion)">
            <summary>
            Activates a potion
            </summary>
            <param name="potion">The potion</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetPotionsOn(Fluid.Potion[])">
            <summary>
            Sets a unique list of potions on, if no potions are passed in, all potions will be turned on
            </summary>
            <param name="potions">The unique list of potions</param>
        </member>
        <member name="M:Fluid.WorldConnection.SetPotionsOff(Fluid.Potion[])">
            <summary>
            Sets a unique list of potions off, if no potions are passed in, all potions will be turned off
            </summary>
            <param name="potions">The unique list of potions</param>
        </member>
        <member name="M:Fluid.WorldConnection.QuickChat(Fluid.QuickChatMessage)">
            <summary>
            Sends a quick chat message
            </summary>
            <param name="quickChatMessage">The quick chat message</param>
        </member>
        <member name="M:Fluid.WorldConnection.Say(System.String)">
            <summary>
            Says a message in the chat
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.WorldConnection.SayInternal(System.String)">
            <summary>
            Sends the chat message to the server
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.WorldConnection.PrivateMessage(Fluid.WorldPlayer,System.String)">
            <summary>
            Sends a private message to a player
            </summary>
            <param name="player">The player</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.WorldConnection.PrivateMessage(System.String,System.String)">
            <summary>
            Sends a private message to a player
            </summary>
            <param name="username">The player's username</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.WorldConnection.KillAll">
            <summary>
            Kills all players
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.KickGuests">
            <summary>
            Kicks all guests
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.RespawnAll">
            <summary>
            Respawns all players
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.GiveEdit(Fluid.WorldPlayer)">
            <summary>
            Gives edit to a player
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:Fluid.WorldConnection.RemoveEdit(Fluid.WorldPlayer)">
            <summary>
            Removes edit from a player
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:Fluid.WorldConnection.KillPlayer(Fluid.WorldPlayer)">
            <summary>
            Kills a player
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:Fluid.WorldConnection.TeleportPlayer(Fluid.WorldPlayer,Fluid.FluidPoint)">
            <summary>
            Teleports a player to a location
            </summary>
            <param name="player">The player</param>
            <param name="location">The location</param>
        </member>
        <member name="M:Fluid.WorldConnection.TeleportPlayer(Fluid.WorldPlayer,Fluid.WorldPlayer)">
            <summary>
            Teleports a player to another player
            </summary>
            <param name="player">The source player</param>
            <param name="target">The target player</param>
        </member>
        <member name="M:Fluid.WorldConnection.MoveToLocation(Fluid.FluidPoint)">
            <summary>
            Teleports to a location
            </summary>
            <param name="location">The world location</param>
        </member>
        <member name="M:Fluid.WorldConnection.MoveToLocation(System.Double,System.Double)">
            <summary>
            Teleports to a location
            </summary>
            <param name="x">The world pixel x</param>
            <param name="y">The world pixel y</param>
        </member>
        <member name="M:Fluid.WorldConnection.SendMovement(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sends movement
            </summary>
            <param name="x">The pixel location x</param>
            <param name="y">The pixel location y</param>
            <param name="speedX">The speed in the x direction</param>
            <param name="speedY">The speed in the y direction</param>
            <param name="modifierX">The current player modifier in the x direction</param>
            <param name="modifierY">The current player modifier in the y direction</param>
            <param name="horizontal">The player input in the horizontal direction</param>
            <param name="vertical">The player input in the vertical direction</param>
            <param name="holdingSpace">Whether the player is holding space</param>
        </member>
        <member name="M:Fluid.WorldConnection.SendMovementInput(Fluid.Input)">
            <summary>
            Sends player input
            </summary>
            <param name="input">The input combination to send</param>
        </member>
        <member name="M:Fluid.WorldConnection.Reconnect">
            <summary>
            Reestablishes a connection to the world
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.Shutdown">
            <summary>
            Shutdown immediate active resources
            </summary>
        </member>
        <member name="M:Fluid.WorldConnection.#ctor(Fluid.FluidClient,System.String)">
            <summary>
            Creates a new Fluid connection
            </summary>
            <param name="client">The Fluid client</param>
            <param name="worldId">The world id</param>
        </member>
        <member name="P:Fluid.WorldConnection.HasAccess">
            <summary>
            Gets whether the connection has building access to the world
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.WorldID">
            <summary>
            Gets the world id
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.World">
            <summary>
            Gets the world
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.Chat">
            <summary>
            Gets the chat
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.Players">
            <summary>
            Gets the players
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.Keys">
            <summary>
            Gets the keys
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.Potions">
            <summary>
            Gets the potion manager
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.Physics">
            <summary>
            Gets the physics engine
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.Uploader">
            <summary>
            Gets the block uploader
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.Me">
            <summary>
            Gets the currently connected player
            </summary>
        </member>
        <member name="P:Fluid.WorldConnection.CrownHolder">
            <summary>
            Gets the player with the crown
            </summary>
        </member>
        <member name="M:Fluid.Handlers.IMessageHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Handle the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The message</param>
            <param name="handled">Whether the message was handled by the user</param>
        </member>
        <member name="P:Fluid.Handlers.IMessageHandler.HandleTypes">
            <summary>
            Gets the types of message this handler this process
            </summary>
        </member>
        <member name="M:Fluid.Handlers.AccessHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.AccessHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.AddHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.AddHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.AllowPotionsHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.AllowPotionsHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.ArmorgamesAuthHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.ArmorgamesAuthHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.BackgroundColorHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.BackgroundColorHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.BlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.BlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.ClearHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.ClearHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.CoinHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.CoinHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.ConnectionCompleteHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.ConnectionCompleteHandler.HandleTypes">
            <summary>
            Gets the list of handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.CrownHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.CrownHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.DoorGateBlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.DoorGateBlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.FaceHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.FaceHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetBlockedHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetBlockedHandler.HandleTypes">
            <summary>
            Gets the handle types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetFriendsHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base </param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetFriendsHandler.HandleTypes">
            <summary>
            Gets the handle types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetInvitesHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetInvitesHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetPendingHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetPendingHandler.HandleTypes">
            <summary>
            Gets the handle types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetPlayerObjectHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the player object message
            </summary>
            <param name="connectionBase">The Fluid connection base</param>
            <param name="message">The message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetPlayerObjectHandler.HandleTypes">
            <summary>
            Gets the player object handle types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetProfileHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetProfileHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetProfileVisibilityHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetProfileVisibilityHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GetShopHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the shop message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GetShopHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GodHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GodHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.GuardianHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.GuardianHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.HideHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.HideHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.InfoHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.InfoHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.InitHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.InitHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.KillHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.KillHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.LabelBlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.LabelBlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.LeftHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.LeftHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.LoadLevelHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection bae</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.LoadLevelHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.LobbyPropertiesHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the lobby properties
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.LobbyPropertiesHandler.HandleTypes">
            <summary>
            Gets the lobby properties handle types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.LostAccessHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.LostAccessHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.ModHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.ModHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.MovementHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.MovementHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.MusicBlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.MusicBlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.OldSayHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.OldSayHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="T:Fluid.Handlers.PlayerIOMessageHandler">
            <summary>
            The playerio message handler
            </summary>
            <param name="message">The playerio message</param>
        </member>
        <member name="M:Fluid.Handlers.PortalBlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.PortalBlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.PotionHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection baes</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.PotionHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.QuickChatHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.QuickChatHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.RotatableBlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.RotatableBlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.SavedHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.SavedHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.SayHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.SayHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.ShowHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.ShowHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.SilverCrownHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.SilverCrownHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.TeleHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.TeleHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.TeleportHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.TeleportHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.TextBlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.TextBlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.UpdateMetaHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.UpdateMetaHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.UpgradeHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.UpgradeHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.WootHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection baes</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.WootHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.WootUpHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection baes</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.WootUpHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="M:Fluid.Handlers.WorldPortalBlockHandler.Process(Fluid.ConnectionBase,PlayerIOClient.Message,System.Boolean)">
            <summary>
            Processes the message
            </summary>
            <param name="connectionBase">The connection base</param>
            <param name="message">The playerio message</param>
            <param name="handled">Whether the message was already handled</param>
        </member>
        <member name="P:Fluid.Handlers.WorldPortalBlockHandler.HandleTypes">
            <summary>
            Gets the handled types
            </summary>
        </member>
        <member name="F:Fluid.KeyManager.m_KeyStates">
            <summary>
            Gets the list of keys and if they're active
            </summary>
        </member>
        <member name="M:Fluid.KeyManager.IsKeyHidden(Fluid.Room.Key)">
            <summary>
            Checks if a key is hidden
            </summary>
            <param name="key">The key</param>
            <returns>True if the key is hidden; otherwise false</returns>
        </member>
        <member name="M:Fluid.KeyManager.IsKeyActive(Fluid.Room.Key)">
            <summary>
            Checks if a key is active
            </summary>
            <param name="key">The key</param>
            <returns>True if the key is active; otherwise false</returns>
        </member>
        <member name="M:Fluid.KeyManager.SetKeyHidden(Fluid.Room.Key)">
            <summary>
            Sets the key as hidden
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Fluid.KeyManager.SetKeyActive(Fluid.Room.Key)">
            <summary>
            Sets the key as active
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Fluid.KeyManager.#ctor">
            <summary>
            Creates a new key manager
            </summary>
        </member>
        <member name="M:Fluid.KeyTrigger.#ctor(Fluid.Room.Key)">
            <summary>
            Creates a key trigger
            </summary>
            <param name="key">The key pressed</param>
        </member>
        <member name="P:Fluid.KeyTrigger.Key">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="M:Fluid.KeyPress.#ctor(Fluid.Room.Key,System.Int32)">
            <summary>
            Creates new key press
            </summary>
            <param name="key">The key</param>
            <param name="userId">The user id</param>
        </member>
        <member name="P:Fluid.KeyPress.UserId">
            <summary>
            Gets or sets the user id
            </summary>
        </member>
        <member name="M:Fluid.LobbyProperties.#ctor(System.Boolean)">
            <summary>
            Creates a new lobby properties
            </summary>
            <param name="firstDailyLogin">Is this is first daily login</param>
        </member>
        <member name="P:Fluid.LobbyProperties.FirstDailyLogin">
            <summary>
            Gets whether this is the first daily login
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.MsPerTick">
            <summary>
            Gets the milliseconds per tick
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.SwitchIDCount">
            <summary>
            Gets the amount of switch id
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.VariableMultiplier">
            <summary>
            Gets the variable multiplier
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.JumpHeight">
            <summary>
            Gets the jump multiplier
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.Gravity">
            <summary>
            Gets the gravity arrows multiplier
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.MaxThrust">
            <summary>
            Gets the maximum thrust
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.ThrustBurnOff">
            <summary>
            Gets the thrust burn off
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.Boost">
            <summary>
            Gets the boost multiplier
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.WaterBuoyancy">
            <summary>
            Gets the watyer buoyancy
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.MudBuoyancy">
            <summary>
            Gets the mud buoyancy
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.LavaBuoyancy">
            <summary>
            Gets the lava buoyancy
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.QueueLength">
            <summary>
            Gets the physics queue array length
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.PortalMultiplier">
            <summary>
            Gets the physics portal multiplier
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.BaseDrag">
            <summary>
            Gets the base drag
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.NoModifierDrag">
            <summary>
            Gets the no modifier drag
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.WaterDrag">
            <summary>
            Gets the water drag
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.MudDrag">
            <summary>
            Gets the mud drag
            </summary>
        </member>
        <member name="F:Fluid.Physics.PhysicsEngine.LavaDrag">
            <summary>
            Gets the lava drag
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.CreateThread">
            <summary>
            Creates a physics thread
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.Update">
            <summary>
            Updates all players
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.IsClimbable(Fluid.Room.BlockID)">
            <summary>
            Gets whether a block is climbable
            </summary>
            <param name="blockId">The block</param>
            <returns>True if climbable; otherwise false</returns>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.IsSolid(Fluid.Room.BlockID)">
            <summary>
            Gets whether a block is solid
            </summary>
            <param name="blockId">The block id</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.CanJumpThrough(Fluid.Room.BlockID)">
            <summary>
            Gets whether a block can be jumped through
            </summary>
            <param name="blockId">The block</param>
            <returns>True if you can jump through; otherwise false</returns>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.ApproachingZero(System.Double)">
            <summary>
            Gets whether a number is approaching zero
            </summary>
            <param name="number">The number</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.ProcessPortals(Fluid.WorldPlayer,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Processes the portal physiscs
            </summary>
            <param name="worldPlayer">The player</param>
            <param name="remainderX">The x remainder</param>
            <param name="currentSX">The current speed in the x direction</param>
            <param name="remainderY">The y remainder</param>
            <param name="currentSY">The current speed in the y direction</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.StepX(Fluid.WorldPlayer,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Processes the x step
            </summary>
            <param name="worldPlayer">The player</param>
            <param name="remainderX">The x remainder</param>
            <param name="currentSX">The current speed in the x direction</param>
            <param name="remainderY">The y remainder</param>
            <param name="currentSY">The current speed in the y direction</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.StepY(Fluid.WorldPlayer,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Processes the y step
            </summary>
            <param name="worldPlayer">The player</param>
            <param name="remainderX">The x remainder</param>
            <param name="currentSX">The current speed in the x direction</param>
            <param name="remainderY">The y remainder</param>
            <param name="currentSY">The current speed in the y direction</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.UpdateThrust(Fluid.WorldPlayer)">
            <summary>
            Updates a players thrust
            </summary>
            <param name="worldPlayer">The world player</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.Tick(Fluid.WorldPlayer)">
            <summary>
            Peforms a physics tick
            </summary>
            <param name="worldPlayer">The player</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.PlayerOverlaps(Fluid.WorldPlayer)">
            <summary>
            Checks player overlaps
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.Overlaps(Fluid.WorldPlayer)">
            <summary>
            Tests if the player is overlapping a block
            </summary>
            <param name="p">The player</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.ServerUpdate(Fluid.WorldPlayer)">
            <summary>
            Performs a server update
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.TickRealtimeAsync(Fluid.WorldPlayer)">
            <summary>
            Ticks up to real time
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.RemoveCoin(Fluid.Room.Block)">
            <summary>
            Removes the coin from all players
            </summary>
            <param name="block">The gold or blue coin</param>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.Start">
            <summary>
            Starts the engine
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.Stop">
            <summary>
            Stops the engine
            </summary>
        </member>
        <member name="M:Fluid.Physics.PhysicsEngine.#ctor(Fluid.WorldConnection)">
            <summary>
            Creates a new physics engine
            </summary>
            <param name="worldConnection">The world connection</param>
        </member>
        <member name="P:Fluid.Physics.PhysicsEngine.TickMode">
            <summary>
            Gets or sets the tick mode
            </summary>
        </member>
        <member name="P:Fluid.Physics.PhysicsEngine.EventMode">
            <summary>
            Gets or sets the physics event mode
            </summary>
        </member>
        <member name="P:Fluid.Physics.PhysicsEngine.World">
            <summary>
            Gets the current world
            </summary>
        </member>
        <member name="M:Fluid.Physics.Vector.Add(System.Double,System.Double)">
            <summary>
            Adds x and y components to a vector
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.Add(Fluid.Physics.Vector)">
            <summary>
            Adds a vector
            </summary>
            <param name="v">The vector</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.Subtract(System.Double,System.Double)">
            <summary>
            Subtracts x and y components from a vector
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <returns>The resulting vecotr</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.Subtract(Fluid.Physics.Vector)">
            <summary>
            Subtracts a vector
            </summary>
            <param name="v">The vector the subtract</param>
            <returns>The resulting vecotr</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.Multiply(Fluid.Physics.Vector)">
            <summary>
            Multiplies this vector
            </summary>
            <param name="v">The vector to multiply by</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.Divide(Fluid.Physics.Vector)">
            <summary>
            Divides this vector
            </summary>
            <param name="v">The vector to divide by</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.DistanceTo(Fluid.Physics.Vector)">
            <summary>
            Distance to another vector
            </summary>
            <param name="v">The vecotr</param>
            <returns>The distance</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.ToPoint">
            <summary>
            Converts the vector into a point
            </summary>
            <returns>A truncated point</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.Invert">
            <summary>
            Inverts the vector
            </summary>
        </member>
        <member name="M:Fluid.Physics.Vector.IsZero">
            <summary>
            Tests if the X and Y components are zero
            </summary>
        </member>
        <member name="M:Fluid.Physics.Vector.Equals(Fluid.Physics.Vector)">
            <summary>
            Tests if this vector is equal to another vector
            </summary>
            <param name="v">The vector to check</param>
            <returns>True if equal; otherwise false</returns>
        </member>
        <member name="M:Fluid.Physics.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new vector
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
        </member>
        <member name="M:Fluid.Physics.Vector.op_Addition(Fluid.Physics.Vector,Fluid.Physics.Vector)">
            <summary>
            Adds two vectors
            </summary>
        </member>
        <member name="M:Fluid.Physics.Vector.op_UnaryNegation(Fluid.Physics.Vector)">
            <summary>
            Inverts the vector
            </summary>
        </member>
        <member name="M:Fluid.Physics.Vector.op_Subtraction(Fluid.Physics.Vector,Fluid.Physics.Vector)">
            <summary>
            Subtracts two vectors
            </summary>
        </member>
        <member name="M:Fluid.Physics.Vector.op_Multiply(Fluid.Physics.Vector,Fluid.Physics.Vector)">
            <summary>
            Multiplies two vectors
            </summary>
        </member>
        <member name="M:Fluid.Physics.Vector.op_Division(Fluid.Physics.Vector,Fluid.Physics.Vector)">
            <summary>
            Divides two vectors
            </summary>
        </member>
        <member name="P:Fluid.Physics.Vector.X">
            <summary>
            Gets or sets the x component
            </summary>
        </member>
        <member name="P:Fluid.Physics.Vector.Y">
            <summary>
            Gets or sets the y component
            </summary>
        </member>
        <member name="M:Fluid.Player.FetchConnectionId">
            <summary>
            Trys to fetch the player's connection id from the player database
            </summary>
        </member>
        <member name="M:Fluid.Player.GetProfile">
            <summary>
            Gets the player's profile
            </summary>
        </member>
        <member name="M:Fluid.Player.#ctor(Fluid.FluidClient,System.String)">
            <summary>
            Creates a new player
            </summary>
            <param name="client">The Fluid client</param>
            <param name="username">The username</param>
        </member>
        <member name="M:Fluid.Player.#ctor(Fluid.FluidClient,System.String,System.String)">
            <summary>
            Creates a new player
            </summary>
            <param name="client">The Fluid client</param>
            <param name="username">The username</param>
            <param name="connectionId">The connection id</param>
        </member>
        <member name="P:Fluid.Player.Username">
            <summary>
            Gets the player's username
            </summary>
        </member>
        <member name="P:Fluid.Player.ConnectionId">
            <summary>
            Gets the player's connection id
            </summary>
        </member>
        <member name="P:Fluid.Player.Type">
            <summary>
            Gets the player's connection type
            </summary>
        </member>
        <member name="M:Fluid.PlayerManager.Add(Fluid.WorldPlayer)">
            <summary>
            Trys to add the player
            </summary>
            <param name="player">The player</param>
            <returns>True if added; otherwise false</returns>
        </member>
        <member name="M:Fluid.PlayerManager.Remove(System.Int32)">
            <summary>
            Trys to remove a player
            </summary>
            <param name="id">The player's id</param>
            <returns>True if removed; otherwise false</returns>
        </member>
        <member name="M:Fluid.PlayerManager.Remove(System.String)">
            <summary>
            Trys to remove a player
            </summary>
            <param name="username">The player's username</param>
            <returns>True if removed; otherwise false</returns>
        </member>
        <member name="M:Fluid.PlayerManager.Get(System.Int32)">
            <summary>
            Gets a player
            </summary>
            <param name="id">The player's id</param>
            <returns>The player if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.PlayerManager.Get(System.String,System.Boolean)">
            <summary>
            Gets a player
            </summary>
            <param name="username">The player's username</param>
            <returns>The player if found; otherwise null</returns>
            <param name="includeConnectedPlayer">Whether to include the connected player in the search</param>
        </member>
        <member name="M:Fluid.PlayerManager.Get(System.Predicate{Fluid.WorldPlayer})">
            <summary>
            Gets a player
            </summary>
            <param name="playerSelector">The player selector</param>
        </member>
        <member name="M:Fluid.PlayerManager.GetList">
            <summary>
            Gets the player dictionary
            </summary>
        </member>
        <member name="M:Fluid.PlayerManager.GetEnumerator">
            <summary>
            Gets the worldplayer enumerator
            </summary>
        </member>
        <member name="M:Fluid.PlayerManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:Fluid.PlayerManager.#ctor">
            <summary>
            Creates a new player manager
            </summary>
        </member>
        <member name="P:Fluid.PlayerManager.Count">
            <summary>
            Gets the amount of players
            </summary>
        </member>
        <member name="P:Fluid.PlayerManager.Item(System.Int32)">
            <summary>
            Gets a player
            </summary>
            <param name="id">The player's id</param>
            <returns>The player if found; otherwise null</returns>
        </member>
        <member name="P:Fluid.PlayerManager.Item(System.String)">
            <summary>
            Gets a player
            </summary>
            <param name="username">The player's username</param>
            <returns>The player if found; otherwise null</returns>
        </member>
        <member name="P:Fluid.PlayerObject.Username">
            <summary>
            The user's name
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.Smiley">
            <summary>
            The user's last smiley choosen
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.IsModerator">
            <summary>
            Gets if the player is a moderator
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.IsInBuildersClub">
            <summary>
            Gets if the player is in builders club
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.BuildersClubMembershipTimeRemaining">
            <summary>
            Gets the amount of time left the player is subscribed to builders club
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.BuildersClubMembershipTime">
            <summary>
            Gets the amount of time the player has been subscribed to builders club
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.BuildersClubMembershipID">
            <summary>
            Gets the player's builders club id
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.BuildersClubWelcome">
            <summary>
            Gets the builder's club welcome
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.Room0">
            <summary>
            Gets room 0
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.BetaOnlyWorld">
            <summary>
            Gets the player's beta only world
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.OwnedWorlds">
            <summary>
            Gets the list of worlds the player owns
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.ChatBanned">
            <summary>
            Gets whether the player's chat is banned
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.CanChat">
            <summary>
            Gets whether the player can chat
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.HasSmileyPackage">
            <summary>
            Gets whether the player has the smiley package
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.IsGuardian">
            <summary>
            Gets if the player is a guardian
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.HomeWorld">
            <summary>
            Gets the player's home world
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.ProfileVisible">
            <summary>
            Gets if the player's profile is visible
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.Banned">
            <summary>
            Gets if the player is banned
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.HasAcceptedTerms">
            <summary>
            Gets if the player has accepted the terms of service
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.WootUp">
            <summary>
            Gets WootUp
            </summary>
        </member>
        <member name="P:Fluid.PlayerObject.MaxEnergy">
            <summary>
            Gets the player's maximum energy
            </summary>
        </member>
        <member name="F:Fluid.PlayerType.Unknown">
            <summary>
            A unknown player type
            </summary>
        </member>
        <member name="F:Fluid.PlayerType.Guest">
            <summary>
            A guest player
            </summary>
        </member>
        <member name="F:Fluid.PlayerType.Everybodyedits">
            <summary>
            A everybodyedits player
            </summary>
        </member>
        <member name="F:Fluid.PlayerType.Facebook">
            <summary>
            A facebook player
            </summary>
        </member>
        <member name="F:Fluid.PlayerType.Kongregate">
            <summary>
            A kongregate player
            </summary>
        </member>
        <member name="F:Fluid.PlayerType.Armorgames">
            <summary>
            A armorgames player
            </summary>
        </member>
        <member name="F:Fluid.PlayerType.Mousebreaker">
            <summary>
            A mousebreaker player
            </summary>
        </member>
        <member name="F:Fluid.Potion.RedAura">
            <summary>
            The potion of red aura
            </summary>
        </member>
        <member name="F:Fluid.Potion.BlueAura">
            <summary>
            The potion of blue aura
            </summary>
        </member>
        <member name="F:Fluid.Potion.YellowAura">
            <summary>
            The potion of yellow aura
            </summary>
        </member>
        <member name="F:Fluid.Potion.Jump">
            <summary>
            The potion of jump
            </summary>
        </member>
        <member name="F:Fluid.Potion.GreenAura">
            <summary>
            The potion of green aura
            </summary>
        </member>
        <member name="F:Fluid.Potion.Fire">
            <summary>
            The potion of fire
            </summary>
        </member>
        <member name="F:Fluid.Potion.Curse">
            <summary>
            The curse potion
            </summary>
        </member>
        <member name="F:Fluid.Potion.Protection">
            <summary>
            The potion of protection
            </summary>
        </member>
        <member name="F:Fluid.Potion.Zombie">
            <summary>
            The zombie potion
            </summary>
        </member>
        <member name="F:Fluid.Potion.Respawn">
            <summary>
            The respawn potion
            </summary>
        </member>
        <member name="F:Fluid.Potion.Levitation">
            <summary>
            The potion of levitation
            </summary>
        </member>
        <member name="F:Fluid.Potion.Flaunt">
            <summary>
            The potion of flaunting
            </summary>
        </member>
        <member name="F:Fluid.Potion.Solitude">
            <summary>
            The potion of solitude
            </summary>
        </member>
        <member name="F:Fluid.Potion.Speed">
            <summary>
            The potion of speed
            </summary>
        </member>
        <member name="M:Fluid.PotionManager.IsEnabled(Fluid.Potion)">
            <summary>
            Gets whether the world has the potion enabled
            </summary>
            <param name="potion">The potion</param>
            <returns>False if not enabled; otherwise true</returns>
        </member>
        <member name="M:Fluid.PotionManager.SetEnabled(Fluid.Potion,System.Boolean)">
            <summary>
            Sets whether the world has the potion enabled
            </summary>
            <param name="potion">The potion</param>
            <param name="enabled">Whether the potion is enabled</param>
        </member>
        <member name="M:Fluid.PotionManager.GetInventoryCount(Fluid.Potion)">
            <summary>
            Gets the amount of potions in the inventory
            </summary>
            <param name="potion">The potion</param>
            <returns>The amount of potions</returns>
        </member>
        <member name="M:Fluid.PotionManager.SetPotionCount(Fluid.Potion,System.Int32)">
            <summary>
            Sets the amount of potions for a potion
            </summary>
            <param name="potion">The potion</param>
            <param name="count">The count of potions</param>
        </member>
        <member name="M:Fluid.PotionManager.#ctor">
            <summary>
            Creates a new potion manager
            </summary>
        </member>
        <member name="P:Fluid.PotionManager.TotalPotionCount">
            <summary>
            Gets the total amount of potions in the inventory
            </summary>
        </member>
        <member name="P:Fluid.Profile.ConnectionId">
            <summary>
            Gets the connection id
            </summary>
        </member>
        <member name="P:Fluid.Profile.Username">
            <summary>
            The user's name
            </summary>
        </member>
        <member name="P:Fluid.Profile.Smiley">
            <summary>
            The user's last smiley choosen
            </summary>
        </member>
        <member name="P:Fluid.Profile.IsBeta">
            <summary>
            Gets if the player is beta
            </summary>
        </member>
        <member name="P:Fluid.Profile.IsModerator">
            <summary>
            Gets if the player is a moderator
            </summary>
        </member>
        <member name="P:Fluid.Profile.IsInBuildersClub">
            <summary>
            Gets if the player is in builders club
            </summary>
        </member>
        <member name="P:Fluid.Profile.BuildersClubMembershipTimeRemaining">
            <summary>
            Gets the amount of time left the player is subscribed to builders club
            </summary>
        </member>
        <member name="P:Fluid.Profile.BuildersClubMembershipTime">
            <summary>
            Gets the amount of time the player has been subscribed to builders club
            </summary>
        </member>
        <member name="P:Fluid.Profile.BuildersClubMembershipID">
            <summary>
            Gets the player's builders club id
            </summary>
        </member>
        <member name="P:Fluid.Profile.BuildersClubWelcome">
            <summary>
            Gets the builder's club welcome
            </summary>
        </member>
        <member name="P:Fluid.Profile.Room0">
            <summary>
            Gets room 0
            </summary>
        </member>
        <member name="P:Fluid.Profile.BetaOnlyWorld">
            <summary>
            Gets the player's beta only world
            </summary>
        </member>
        <member name="P:Fluid.Profile.OwnedWorlds">
            <summary>
            Gets the list of worlds the player owns
            </summary>
        </member>
        <member name="P:Fluid.Profile.ProfileVisible">
            <summary>
            Gets if the player's profile is visible
            </summary>
        </member>
        <member name="F:Fluid.ProfileVisibility.Public">
            <summary>
            Profile is public
            </summary>
        </member>
        <member name="F:Fluid.ProfileVisibility.Private">
            <summary>
            Profile is private
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Normal">
            <summary>
            The everybodyedits room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Beta">
            <summary>
            The beta everybodyedits room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Guardian">
            <summary>
            The guardian room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Tracking">
            <summary>
            The tracking room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Auth">
            <summary>
            The authentication room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Service">
            <summary>
            The service room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.GuestService">
            <summary>
            The guest service room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Tutorial">
            <summary>
            The tutorial room type
            </summary>
        </member>
        <member name="F:Fluid.RoomType.Unknown">
            <summary>
            A unknown room type
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.AccessEvent">
            <summary>
            The event for when the connection gains edit access
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AccessEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.AddEvent">
            <summary>
            The server event for when a player is added
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AddEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AddEvent.Player">
            <summary>
            Gets the player who joined
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.AllowPotionEvent">
            <summary>
            The server event for when potions enabled has changed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AllowPotionEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AllowPotionEvent.Potions">
            <summary>
            Gets the potions changed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AllowPotionEvent.AreEnabled">
            <summary>
            Gets whether the potions are enabled
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.AuthEvent">
            <summary>
            The server authentication event
            </summary>
        </member>
        <member name="M:Fluid.ServerEvents.AuthEvent.IsAuthenitcated">
            <summary>
            Checks if the message is authenticated
            </summary>
        </member>
        <member name="M:Fluid.ServerEvents.AuthEvent.#ctor(System.String,System.String)">
            <summary>
            Creates a new armor games auth message
            </summary>
            <param name="userId">The user id</param>
            <param name="auth">The auth</param>
        </member>
        <member name="P:Fluid.ServerEvents.AuthEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AuthEvent.UserID">
            <summary>
            The user id
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.AuthEvent.AuthToken">
            <summary>
            The auth
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.BackgroundColorChangedEvent">
            <summary>
            The server event for when a world's background color is changed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.BackgroundColorChangedEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.BackgroundColorChangedEvent.Color">
            <summary>
            Gets the color the background was changed to
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.BlockEvent">
            <summary>
            The server event for when a regular block was placed, or erased
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.BlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.BlockEvent.Block">
            <summary>
            Gets the changed block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.ClearEvent">
            <summary>
            The server event for when a level is cleared
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ClearEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ClearEvent.World">
            <summary>
            Gets the world
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ClearEvent.BorderBlockID">
            <summary>
            Gets the border block id
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ClearEvent.WorkareaBlockID">
            <summary>
            Gets the workarea block id
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.CoinBlockEvent">
            <summary>
            The server event for when a coin block is placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.CoinBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.CoinBlockEvent.CoinBlock">
            <summary>
            Gets the coin block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.CoinEvent">
            <summary>
            The server event for when a player gets a coin
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.CoinEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.CoinEvent.Player">
            <summary>
            Gets the player who hit a coin
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.ConnectionCompleteEvent">
            <summary>
            The server event for when the lobby connection is complete
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ConnectionCompleteEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.CrownEvent">
            <summary>
            The server event for when the player gets the gold crown
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.CrownEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.CrownEvent.Player">
            <summary>
            Gets the player who touched the crown
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.DeathBlockEvent">
            <summary>
            The server event for when a death block was placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.DeathBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.DeathBlockEvent.DeathBlock">
            <summary>
            Gets the death block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.DeleteFriendEvent">
            <summary>
            The server event for when a friend was deleted successfully
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.DeleteFriendEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.DeleteFriendEvent.Success">
            <summary>
            Gets if the deletion was successful
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.FaceEvent">
            <summary>
            The server event for when a player's face changes
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.FaceEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.FaceEvent.Player">
            <summary>
            Gets the player who changed their face
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GetBlockedEvent">
            <summary>
            The server callback event for the getting the list of blocked friends
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetBlockedEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetBlockedEvent.Blocked">
            <summary>
            Gets the list of blocked friends
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GetFriendsEvent">
            <summary>
            The server callback event for getting the list of friends
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetFriendsEvent.Friends">
            <summary>
            Gets the list of friends
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetFriendsEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GetInvitesEvent">
            <summary>
            The server callback event for getting the list of friend invites
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetInvitesEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetInvitesEvent.Invites">
            <summary>
            Gets the list of friend invites
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GetLobbyPropertiesEvent">
            <summary>
            The server callback event for getting the lobby properties
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetLobbyPropertiesEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetLobbyPropertiesEvent.LobbyProperties">
            <summary>
            Gets the lobby properties
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GetPendingEvent">
            <summary>
            The server callback event for gettings the list of pending friends
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetPendingEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetPendingEvent.Pending">
            <summary>
            Gets the list of pending friends
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GetProfileEvent">
            <summary>
            The server callback event for getting a player's profile
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetProfileEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetProfileEvent.Profile">
            <summary>
            Gets the profile
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GetProfileVisibilityEvent">
            <summary>
            The server callback event for getting changing the player's profile visibility
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetProfileVisibilityEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetProfileVisibilityEvent.IsVisible">
            <summary>
            Gets if the profile is visible
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetShopEvent.Success">
            <summary>
            Gets if the request was successful
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetShopEvent.Shop">
            <summary>
            Gets the shop;
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GetShopEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GodEvent">
            <summary>
            The server event for when a player changed god mode
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GodEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GodEvent.Player">
            <summary>
            Gets the player who changed god mode
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.GuardianModeEvent">
            <summary>
            The server event for when a player changes their guardian mode
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GuardianModeEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.GuardianModeEvent.Player">
            <summary>
            Gets the player who toggled guardian mode
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.HideEvent">
            <summary>
            The server event for when key's are hidden
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.HideEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.HideEvent.Triggers">
            <summary>
            Gets the list of key triggers
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.InfoEvent">
            <summary>
            The server event for when a player receives information from the server
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.InfoEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.InfoEvent.SystemMessage">
            <summary>
            Gets the system message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.InitEvent">
            <summary>
            The server event for the initial world data
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.InitEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.InitEvent.World">
            <summary>
            Gets the loaded world
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.InitEvent.ConnectedPlayer">
            <summary>
            Gets the connected player
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.KillEvent">
            <summary>
            The server event for when a player is killed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.KillEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.KillEvent.Player">
            <summary>
            Gets the player who was killed
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.LabelBlockEvent">
            <summary>
            The server event for when a label block is placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.LabelBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.LabelBlockEvent.LabelBlock">
            <summary>
            Gets the label block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.LeftEvent">
            <summary>
            The server event for when a player leaves the world
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.LeftEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.LeftEvent.Player">
            <summary>
            Gets the player who left
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.LoadLevelEvent">
            <summary>
            The server event for when the level is reloaded
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.LoadLevelEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.LoadLevelEvent.World">
            <summary>
            Gets the world
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.LostAccessEvent">
            <summary>
            The server event for when the connection loses edit priveledges
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.LostAccessEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="M:Fluid.ServerEvents.MessageReceivedEvent.WaitForMessage(System.Int32)">
            <summary>
            Waits for the message
            </summary>
            <param name="timeout">The timeout in milliseconds</param>
        </member>
        <member name="M:Fluid.ServerEvents.MessageReceivedEvent.Invoke(System.Object)">
            <summary>
            Invokes the event
            </summary>
            <param name="message">The message received</param>
        </member>
        <member name="M:Fluid.ServerEvents.MessageReceivedEvent.Dispose">
            <summary>
            Disposes the event's resources
            </summary>
        </member>
        <member name="M:Fluid.ServerEvents.MessageReceivedEvent.#ctor">
            <summary>
            Creates a new message received event
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.MessageReceivedEvent.Message">
            <summary>
            The message received
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.ModModeEvent">
            <summary>
            The server event for when a player changes moderator mode
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ModModeEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ModModeEvent.Player">
            <summary>
            Gets the player who toggled moderator mode
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.MovementEvent">
            <summary>
            The server event for when a player inputs movement
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.MovementEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.MovementEvent.Player">
            <summary>
            Gets the player
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.MovementEvent.Input">
            <summary>
            Gets the input of the player
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.MusicBlockEvent">
            <summary>
            The server event for when a music block is placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.MusicBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.MusicBlockEvent.MusicBlock">
            <summary>
            Gets the music block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.OldSayEvent">
            <summary>
            The server event for when a old chatmessage is loaded
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.OldSayEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.OldSayEvent.ChatMessage">
            <summary>
            Gets the old chat message
            </summary>
        </member>
        <member name="M:Fluid.ServerEvents.PlayerIOMessage.#ctor(PlayerIOClient.Message)">
            <summary>
            Creates a new player io message
            </summary>
            <param name="raw">The raw message</param>
        </member>
        <member name="P:Fluid.ServerEvents.PlayerIOMessage.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PlayerIOMessage.Handled">
            <summary>
            Gets or Sets whether the message has been handled
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.PlayerObjectEvent">
            <summary>
            The server callback event for when a player object is received
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PlayerObjectEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PlayerObjectEvent.PlayerObject">
            <summary>
            Gets the player object
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.PortalBlockEvent">
            <summary>
            The server event for when a portal block is placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PortalBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PortalBlockEvent.Portal">
            <summary>
            Gets the portal
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.PotionEvent">
            <summary>
            The server event for when a player's potion state changes. Activation or deactivation.
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PotionEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PotionEvent.Player">
            <summary>
            Gets the player
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PotionEvent.Potion">
            <summary>
            Gets the potion
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PotionEvent.IsActive">
            <summary>
            Gets whether the potion is active
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.PurpleBlockEvent">
            <summary>
            The server event for when a purple block is placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PurpleBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.PurpleBlockEvent.PurpleBlock">
            <summary>
            Gets the purple block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.QuickChatEvent">
            <summary>
            The server event for when a player sends a quick chat message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.QuickChatEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.QuickChatEvent.ChatMessage">
            <summary>
            Gets the quick chat message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.QuickChatEvent.QuickChatMessage">
            <summary>
            Gets the quick chat message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.ResetEvent">
            <summary>
            The server event for when all players are reset
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ResetEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.RotatableBlockEvent">
            <summary>
            The server event for when a rotatable block is placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.RotatableBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.RotatableBlockEvent.RotatableBlock">
            <summary>
            Gets the rotatable block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.SavedEvent">
            <summary>
            The server event for when the world is saved
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.SavedEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.SavedEvent.World">
            <summary>
            Gets the saved world
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.SayEvent">
            <summary>
            The server event for when a player sends a chat message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.SayEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.SayEvent.ChatMessage">
            <summary>
            Get the chat message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.ShowEvent">
            <summary>
            The server event for when the world's keys are shown
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ShowEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.ShowEvent.Triggers">
            <summary>
            Gets the key triggers
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.SilverCrownEvent">
            <summary>
            The server event for when a player completes the level, or gets the silver crown
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.SilverCrownEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.SilverCrownEvent.Player">
            <summary>
            Gets the player who touched the silver crown
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.TeleportEvent">
            <summary>
            The server event for when a player is teleported
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.TeleportEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.TeleportEvent.Player">
            <summary>
            Gets the teleported player
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.TeleportEvent.Location">
            <summary>
            Gets the location
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.TextBlockEvent">
            <summary>
            The server event for when a text block is placed
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.TextBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.TextBlockEvent.TextBlock">
            <summary>
            Gets the text/sign block
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.UpdateMetaEvent">
            <summary>
            The server event for when the world's plays, woots, title, etc. is updated
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.UpdateMetaEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.UpdateMetaEvent.World">
            <summary>
            Gets the updated world
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.UpgradeEvent">
            <summary>
            The server event for when the game is updated
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.UpgradeEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.WootEvent">
            <summary>
            The server event for when a player gives a woot
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.WootEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.WootEvent.Player">
            <summary>
            Gets the player
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.WootUpEvent">
            <summary>
            The server event for when a player gives a woot
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.WootUpEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.WootUpEvent.Player">
            <summary>
            Gets the player
            </summary>
        </member>
        <member name="T:Fluid.ServerEvents.WorldPortalBlockEvent">
            <summary>
            The server event for when a player places a world portal
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.WorldPortalBlockEvent.Raw">
            <summary>
            Gets the raw message
            </summary>
        </member>
        <member name="P:Fluid.ServerEvents.WorldPortalBlockEvent.WorldPortal">
            <summary>
            Gets the world portal
            </summary>
        </member>
        <member name="P:Fluid.Shop.Energy">
            <summary>
            Gets the amount of energy
            </summary>
        </member>
        <member name="P:Fluid.Shop.TimeToEnergy">
            <summary>
            Gets the time until next energy
            </summary>
        </member>
        <member name="P:Fluid.Shop.TotalEnergy">
            <summary>
            Gets the total energy
            </summary>
        </member>
        <member name="P:Fluid.Shop.SecondsBetweenEnergy">
            <summary>
            Gets the seconds between energy
            </summary>
        </member>
        <member name="P:Fluid.Shop.ShopItems">
            <summary>
            Gets the list of all shop item's data
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.ID">
            <summary>
            Gets the item id
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.Type">
            <summary>
            Gets the item type
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.PriceCoins">
            <summary>
            Gets the price in coins of the item
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.Enabled">
            <summary>
            Gets whether the item is enabled
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.IsFeatured">
            <summary>
            Gets whether the item is featured
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.BitmapSheetOffset">
            <summary>
            Gets the bitmap sheet offset
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.HeaderText">
            <summary>
            Gets the header text
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.BodyText">
            <summary>
            Gets the body text
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.IsGridFeatured">
            <summary>
            Gets if the grid is featured
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.PriceUSD">
            <summary>
            Gets the price of the item in United States Dollars
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.PriceEnergy">
            <summary>
            Gets the price of the item in energy
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.EnergyPerClick">
            <summary>
            Gets the amount of energy per click
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.InPlayerWorldsOnly">
            <summary>
            Gets if the item is only in player worlds
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.MinimumClass">
            <summary>
            Gets the minimum magic class
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.IsClassic">
            <summary>
            Gets if the item is a classic item
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.OnSale">
            <summary>
            Gets if the item is on sale
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.BetaOnly">
            <summary>
            Gets if the item is beta only
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.BitmapSheetID">
            <summary>
            Gets the bitmap sheet identification
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.Reusable">
            <summary>
            Gets if the item is reusable
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.IsNew">
            <summary>
            Gets if the item is new
            </summary>
        </member>
        <member name="P:Fluid.VaultShopItem.IsDevOnly">
            <summary>
            Gets if the item is for developers only
            </summary>
        </member>
        <member name="P:Fluid.ShopItem.EnergyUsed">
            <summary>
            Gets the amount of energy used
            </summary>
        </member>
        <member name="P:Fluid.ShopItem.AmountOwned">
            <summary>
            Gets the amount of items owned
            </summary>
        </member>
        <member name="P:Fluid.ShopItem.OwnedInPayvault">
            <summary>
            Gets if the item is owned in payvault
            </summary>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.CheckDirectory">
            <summary>
            Checks if the directory exists; if it doesn't tries to create the directory
            </summary>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.GetWriteStream(System.String)">
            <summary>
            Gets a file write stream for a value
            </summary>
            <param name="valueName">The value name</param>
            <returns>The stream if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.GetReadStream(System.String)">
            <summary>
            Gets a file read stream for a value
            </summary>
            <param name="valueName">The value name</param>
            <returns>The stream if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.ReadValue(System.String)">
            <summary>
            Reads raw file data for a value
            </summary>
            <param name="valueName">The value name</param>
            <returns>The raw file data if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.Write(System.String,System.String)">
            <summary>
            Writes raw file data to a file
            </summary>
            <param name="valueName">The value's name</param>
            <param name="data">The data</param>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.Save``1(System.String,``0)">
            <summary>
            Saves data to storage
            </summary>
            <typeparam name="T">The type of data</typeparam>
            <param name="valueName">The value's name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.Load``1(System.String)">
            <summary>
            Loads data from storage
            </summary>
            <typeparam name="T">The type of data</typeparam>
            <param name="valueName">The value's name</param>
            <returns>The type if loaded; otherwise the type default</returns>
        </member>
        <member name="M:Fluid.Storage.StorageProvider.#ctor(System.String)">
            <summary>
            Creates a new storage provider
            </summary>
        </member>
        <member name="P:Fluid.Storage.StorageProvider.Directory">
            <summary>
            Gets the storage's directory
            </summary>
        </member>
        <member name="M:Fluid.Storage.JsonStorageProvider.Save``1(System.String,``0)">
            <summary>
            Saves data to storage
            </summary>
            <typeparam name="T">The type of data</typeparam>
            <param name="valueName">The value's name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Fluid.Storage.JsonStorageProvider.Load``1(System.String)">
            <summary>
            Loads data from storage
            </summary>
            <typeparam name="T">The type of data</typeparam>
            <param name="valueName">The value's name</param>
            <returns>The type if loaded; otherwise the type default</returns>
        </member>
        <member name="M:Fluid.Storage.JsonStorageProvider.OnError(System.Object,Newtonsoft.Json.Serialization.ErrorEventArgs)">
            <summary>
            Handles json parsing errors
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The error</param>
        </member>
        <member name="M:Fluid.Storage.JsonStorageProvider.#ctor(System.String)">
            <summary>
            Creates a json storage provider
            </summary>
            <param name="directory">The storage directory</param>
        </member>
        <member name="M:Fluid.Storage.JsonStorageProvider.#ctor(Fluid.FluidLog,System.String)">
            <summary>
            Creates a json storage provider
            </summary>
            <param name="logger">The logger</param>
            <param name="directory">The directory</param>
        </member>
        <member name="P:Fluid.Storage.JsonStorageProvider.Logger">
            <summary>
            Gets or Sets the storage logger
            </summary>
        </member>
        <member name="T:Fluid.UnsafeAction`1">
            <summary>
            Safe Action Delegate
            </summary>
        </member>
        <member name="T:Fluid.BlockUploadManager">
            <summary>
            The asynchronous block upload manager
            </summary>
        </member>
        <member name="M:Fluid.BlockUploadManager.WaitForBlocks">
            <summary>
            Waits for the blocks to be sent
            </summary>
        </member>
        <member name="M:Fluid.BlockUploadManager.WaitForBlocksAsync">
            <summary>
            Waits for the blocks to be sent asynchronously
            </summary>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:Fluid.BlockUploadManager.GetNextInList">
            <summary>
            Gets the next in the list
            </summary>
            <returns>The next block that should be sent</returns>
        </member>
        <member name="M:Fluid.BlockUploadManager.UploadThread">
            <summary>
            The upload thread loop
            </summary>
        </member>
        <member name="M:Fluid.BlockUploadManager.IsQueueEmpty">
            <summary>
            Gets if the queue is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluid.BlockUploadManager.IsUploadThreadDead">
            <summary>
            Gets if the upload thread is dead
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluid.BlockUploadManager.CreateUploadThread">
            <summary>
            Creates a new upload thread
            </summary>
        </member>
        <member name="M:Fluid.BlockUploadManager.StopThread">
            <summary>
            Stops the upload thread
            </summary>
        </member>
        <member name="M:Fluid.BlockUploadManager.RemoveExpected">
            <summary>
            Removes the expected block
            </summary>
        </member>
        <member name="M:Fluid.BlockUploadManager.Confirm(Fluid.Room.Block)">
            <summary>
            Confirms a block was sent
            </summary>
            <param name="block">The block received from the server</param>
        </member>
        <member name="M:Fluid.BlockUploadManager.QueueBlock(Fluid.Room.Block,System.Int32)">
            <summary>
            Adds the block to the end of the list
            </summary>
            <param name="block">The block to be queued</param>
            <param name="blockThrottle">The speed of the block to be uploaded at</param>
        </member>
        <member name="M:Fluid.BlockUploadManager.#ctor(Fluid.WorldConnection)">
            <summary>
            Creates a new block manager
            </summary>
            <param name="worldCon"></param>
        </member>
        <member name="M:Fluid.BlockUploadManager.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="E:Fluid.BlockUploadManager.OnQueueFinished">
            <summary>
            The event when blocks are finished being uploaded
            </summary>
        </member>
        <member name="P:Fluid.BlockUploadManager.BlocksQueued">
            <summary>
            Gets the amount of blocks queued
            </summary>
        </member>
        <member name="P:Fluid.BlockUploadManager.Uploading">
            <summary>
            Gets whether the uploader is uploading
            </summary>
        </member>
        <member name="M:Fluid.Web.PlayerIORequest.DecodeBody(System.Text.Encoding)">
            <summary>
            Decodes the body
            </summary>
            <param name="encoding">The encoding to use</param>
            <returns>The decoded body</returns>
        </member>
        <member name="M:Fluid.Web.PlayerIORequest.#ctor(System.String,System.Uri,System.Net.WebHeaderCollection,System.Byte[])">
            <summary>
            Creates a new player io request
            </summary>
            <param name="method">The request method</param>
            <param name="uri">The uri</param>
            <param name="headers">The headers</param>
            <param name="body">The body</param>
        </member>
        <member name="P:Fluid.Web.PlayerIORequest.Method">
            <summary>
            Gets the request method
            </summary>
        </member>
        <member name="P:Fluid.Web.PlayerIORequest.Uri">
            <summary>
            Gets the request uri
            </summary>
        </member>
        <member name="P:Fluid.Web.PlayerIORequest.Headers">
            <summary>
            Gets the request headers
            </summary>
        </member>
        <member name="P:Fluid.Web.PlayerIORequest.Body">
            <summary>
            Gets the body of the request
            </summary>
        </member>
        <member name="T:Fluid.World">
            <summary>
            The world
            </summary>
        </member>
        <member name="M:Fluid.World.IsInBounds(Fluid.Room.Block)">
            <summary>
            Tests if a location is within the world
            </summary>
            <param name="block">The block</param>
            <returns>If the location is within the world's bounds</returns>
        </member>
        <member name="M:Fluid.World.IsInBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if a location is within the world
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The layer</param>
            <returns>If the location is within the world's bounds</returns>
        </member>
        <member name="M:Fluid.World.IsInBounds(System.Int32,System.Int32)">
            <summary>
            Tests if a location is within the world
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <returns>If the location is within the world's bounds</returns>
        </member>
        <member name="M:Fluid.World.GetBlockAt(Fluid.FluidPoint,Fluid.Room.Layer)">
            <summary>
            Gets a block
            </summary>
            <param name="p">The point</param>
            <param name="layer">The block layer</param>
            <returns>The block at that location</returns>
        </member>
        <member name="M:Fluid.World.GetBlockAt(System.Int32,System.Int32,Fluid.Room.Layer)">
            <summary>
            Gets the block at a location
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="layer">The layer</param>
            <returns>The block at the location; null if the location is invalid</returns>
        </member>
        <member name="M:Fluid.World.GetBlockAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the block at a location
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The layer</param>
            <returns>The block at the location; null if the location is invalid</returns>
        </member>
        <member name="M:Fluid.World.GetBlocks">
            <summary>
            Gets all the worlds blocks
            </summary>
            <returns>The world's array of blocks</returns>
        </member>
        <member name="M:Fluid.World.GetBlocks(Fluid.FluidRect)">
            <summary>
            Gets all the worlds blocks within a rectangle
            </summary>
            <param name="rect">The rectangle</param>
            <returns>The list of blocks</returns>
        </member>
        <member name="M:Fluid.World.Find(System.Predicate{Fluid.Room.Block})">
            <summary>
            Finds all blocks that match a predicate
            </summary>
            <param name="searchDelegate">The search predicate</param>
            <returns>The list of matching blocks</returns>
        </member>
        <member name="M:Fluid.World.SetBlock(Fluid.Room.Block)">
            <summary>
            Sets the block without sending the block to the server
            </summary>
            <param name="block">Block to set in the world</param>
        </member>
        <member name="M:Fluid.World.CanPlace(Fluid.Room.Block)">
            <summary>
            Calculates whether the block can be placed successfully
            </summary>
            <param name="block">The block</param>
        </member>
        <member name="M:Fluid.World.GetWorldType(System.Int32,System.Int32)">
            <summary>
            Gets the world type from the world's width and height
            </summary>
        </member>
        <member name="M:Fluid.World.GetPortalByID(System.UInt32)">
            <summary>
            Gets a portal in the world by id
            </summary>
            <param name="id">The id of the portal</param>
        </member>
        <member name="M:Fluid.World.IsBorderBlock(Fluid.Room.Block)">
            <summary>
            Gets if the block is on the border of the world
            </summary>
            <param name="block">The block</param>
            <returns>True if on the border; otherwise false</returns>
        </member>
        <member name="M:Fluid.World.Clear(System.Int32,System.Int32,Fluid.Room.BlockID,Fluid.Room.BlockID)">
            <summary>
            Clears the world
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="borderId">The border id</param>
            <param name="workareaId">The workarea id</param>
        </member>
        <member name="M:Fluid.World.GetValue``1(PlayerIOClient.DatabaseObject,System.String)">
            <summary>
            Trys to get a property value from a database object
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="databaseObject">The database object</param>
            <param name="propertyName">The property name</param>
        </member>
        <member name="M:Fluid.World.GetValue``1(PlayerIOClient.DatabaseObject,System.String,``0)">
            <summary>
            Trys to get a property value from a database object
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="databaseObject">The database object</param>
            <param name="propertyName">The property name</param>
            <param name="defaultValue">The default value for the property</param>
        </member>
        <member name="M:Fluid.World.CreateEmptyWorld">
            <summary>
            Creates an empty world from the current width and height
            </summary>
        </member>
        <member name="M:Fluid.World.DecryptKey(System.String)">
            <summary>
            Decrypts the raw key
            </summary>
            <param name="keyRaw">The raw key</param>
        </member>
        <member name="M:Fluid.World.GetLocations(System.Byte[],System.Byte[])">
            <summary>
            Gets the block locations
            </summary>
            <param name="bytesX">The x bytes</param>
            <param name="bytesY">The y bytes</param>
        </member>
        <member name="M:Fluid.World.Deserialize(PlayerIOClient.DatabaseObject)">
            <summary>
            Deserialize's the world data
            </summary>
            <param name="worldObject">The world data as a database array</param>
        </member>
        <member name="M:Fluid.World.Deserialize(PlayerIOClient.Message)">
            <summary>
            Deserialize's the world data
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.World.DeserializeInit(PlayerIOClient.Message)">
            <summary>
            Deserialize's the init message
            </summary>
            <param name="initMessage">The init message</param>
        </member>
        <member name="M:Fluid.World.#ctor(Fluid.FluidClient,PlayerIOClient.DatabaseObject)">
            <summary>
            Creates a new world from database data
            </summary>
            <param name="client">The client</param>
            <param name="worldObject">The world data</param>
        </member>
        <member name="M:Fluid.World.#ctor(Fluid.FluidClient,PlayerIOClient.Message)">
            <summary>
            Creates a new world from a init message
            </summary>
            <param name="client">The client</param>
            <param name="initMessage">The init message</param>
        </member>
        <member name="P:Fluid.World.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets or Sets the block at a location
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The layer</param>
            <returns>The block at the location; null if the location is invalid</returns>
        </member>
        <member name="P:Fluid.World.Item(System.Int32,System.Int32,Fluid.Room.Layer)">
            <summary>
            Gets or Sets the block at a location
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="layer">The layer</param>
            <returns>The block at the location; null if the location is invalid</returns>
        </member>
        <member name="P:Fluid.World.Owner">
            <summary>
            Gets the world's owner
            </summary>
        </member>
        <member name="P:Fluid.World.Title">
            <summary>
            Gets the world's title
            </summary>
        </member>
        <member name="P:Fluid.World.Width">
            <summary>
            Gets the world's width
            </summary>
        </member>
        <member name="P:Fluid.World.Height">
            <summary>
            Gets the world's height
            </summary>
        </member>
        <member name="P:Fluid.World.Plays">
            <summary>
            Gets the world's plays
            </summary>
        </member>
        <member name="P:Fluid.World.WorldKey">
            <summary>
            Gets the world's encryption key, does not exists in database world
            </summary>
        </member>
        <member name="P:Fluid.World.WorldType">
            <summary>
            Gets the world's type
            </summary>
        </member>
        <member name="P:Fluid.World.BackgroundColor">
            <summary>
            Gets the world's background color
            </summary>
        </member>
        <member name="P:Fluid.World.AllowPotions">
            <summary>
            Gets whether the world allows potions
            </summary>
        </member>
        <member name="P:Fluid.World.Woots">
            <summary>
            Gets the world's woots
            </summary>
        </member>
        <member name="P:Fluid.World.TotalWoots">
            <summary>
            Gets the world's total woots
            </summary>
        </member>
        <member name="P:Fluid.World.Visible">
            <summary>
            Gets whether the world is visible
            </summary>
        </member>
        <member name="P:Fluid.World.IsLoaded">
            <summary>
            Gets whether the world is loaded
            </summary>
        </member>
        <member name="P:Fluid.World.IsDatabaseWorld">
            <summary>
            Gets whether the world is a database world
            </summary>
        </member>
        <member name="P:Fluid.World.IsTutorialWorld">
            <summary>
            Gets whether the world is a tutorial world
            </summary>
        </member>
        <member name="P:Fluid.World.Gravity">
            <summary>
            Gets the world's gravity
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.IsGod">
            <summary>
            Checks if the player is in god, guardian, or moderator mode
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.HasPotionActive(Fluid.Potion)">
            <summary>
            Checks if a player has a potion active
            </summary>
            <param name="potion">The potion</param>
        </member>
        <member name="M:Fluid.WorldPlayer.GetLocation">
            <summary>
            Gets the exact location of the player
            </summary>
            <returns>The exact location</returns>
        </member>
        <member name="M:Fluid.WorldPlayer.GetBlockLocation">
            <summary>
            Gets the block location of the player
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluid.WorldPlayer.GetFOV">
            <summary>
            Gets the player's field of view
            </summary>
            <returns>The field of view</returns>
        </member>
        <member name="M:Fluid.WorldPlayer.GetVelocity">
            <summary>
            Gets the velocity of the player
            </summary>
            <returns>The player's velocity</returns>
        </member>
        <member name="M:Fluid.WorldPlayer.Kick">
            <summary>
            Trys to kick the player from the room
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.Kick(System.String)">
            <summary>
            Trys to kick the player from the room
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.PrivateMessage(System.String)">
            <summary>
            Sends the player a private message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Fluid.WorldPlayer.Teleport(Fluid.FluidPoint)">
            <summary>
            Teleports the player to a location
            </summary>
            <param name="location">The location</param>
        </member>
        <member name="M:Fluid.WorldPlayer.Teleport(Fluid.WorldPlayer)">
            <summary>
            Teleports the player to another player
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:Fluid.WorldPlayer.Kill">
            <summary>
            Kills the player
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.GiveEdit">
            <summary>
            Gives edit to the player
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.RemoveEdit">
            <summary>
            Removes edit from the player
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.GiveCrown">
            <summary>
            Gives the crown to the current player
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.SetGodMode(System.Boolean)">
            <summary>
            Sets the god mode of the current player
            </summary>
            <param name="value">The godmode value</param>
        </member>
        <member name="M:Fluid.WorldPlayer.TouchWithPotion(Fluid.Potion)">
            <summary>
            Touchs the player with a potion
            </summary>
            <param name="potion">The potion type</param>
        </member>
        <member name="M:Fluid.WorldPlayer.Respawn">
            <summary>
            Respawns the player
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.Reset">
            <summary>
            Resets the player
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.KillPlayerInternal">
            <summary>
            Kills the player internally
            </summary>
        </member>
        <member name="M:Fluid.WorldPlayer.SetPotion(Fluid.Potion,Fluid.PotionState)">
            <summary>
            Sets a potion state
            </summary>
            <param name="potion">The potion</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Fluid.WorldPlayer.SetLocationInternal(Fluid.Physics.Vector)">
            <summary>
            Sets the player's location without sending the location to the server
            </summary>
            <param name="loc">The location vector</param>
        </member>
        <member name="M:Fluid.WorldPlayer.Get``1(System.String)">
            <summary>
            Gets a stored variable attached to this player
            </summary>
            <typeparam name="T">The variable type</typeparam>
            <param name="variableName">The variable name</param>
            <returns>The variable if found; otherwise null</returns>
        </member>
        <member name="M:Fluid.WorldPlayer.Set``1(System.String,``0)">
            <summary>
            Sets a stored variable attached to the player
            </summary>
            <typeparam name="T">The variable type</typeparam>
            <param name="variableName">The variable name</param>
            <param name="variableValue">The variable value</param>
        </member>
        <member name="M:Fluid.WorldPlayer.GetHashCode">
            <summary>
            Gets the player's hash code
            </summary>
            <returns>The player's hash code</returns>
        </member>
        <member name="M:Fluid.WorldPlayer.#ctor(Fluid.WorldConnection,System.String,System.Int32)">
            <summary>
            Creates a new 
            </summary>
            <param name="connection">The world connection</param>
            <param name="username">The username</param>
            <param name="id">The id</param>
        </member>
        <member name="M:Fluid.WorldPlayer.#ctor(Fluid.WorldConnection,System.String,System.String,System.Int32)">
            <summary>
            Creates a new 
            </summary>
            <param name="connection">The world connection</param>
            <param name="username">The username</param>
            <param name="connectionId">The connection id </param>
            <param name="id">The id</param>
        </member>
        <member name="P:Fluid.WorldPlayer.Id">
            <summary>
            Gets the player's id
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.Face">
            <summary>
            Gets the player's face
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.AccessLevel">
            <summary>
            Gets the player's priveledges
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.InGodMode">
            <summary>
            Gets whether the player is in god mode
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.InModMode">
            <summary>
            Gets whether the player is in moderator mode
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.InGuadianMode">
            <summary>
            Gets whether the player is in guardian mode
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.IsModerator">
            <summary>
            Gets whether the player is a moderator
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.IsGuardian">
            <summary>
            Gets whether the player is a guardian
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.IsConnectedPlayer">
            <summary>
            Gets whether the player is the connected player
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.HasChat">
            <summary>
            Gets whether the player has chat
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.GoldCoins">
            <summary>
            Gets the player's gold coin count
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.CollectedGoldCoins">
            <summary>
            Gets the collected coins
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.BlueCoins">
            <summary>
            Gets the player's blue coin count
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.CollectedBlueCoins">
            <summary>
            Gets the collected coins
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.IsFriendsWithYou">
            <summary>
            Gets whether the player is friends with you
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.HasBuildersClub">
            <summary>
            Gets whether the player has builder's club
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.HasCrown">
            <summary>
            Gets whether the player has the golden crown
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.HasSilverCrown">
            <summary>
            Gets whether the player has a silver crown
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.Potions">
            <summary>
            Gets the player's active potions
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.LastInput">
            <summary>
            Gets the last input of the player
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.X">
            <summary>
            Gets the x coordinate
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.BlockX">
            <summary>
            Gets the player's block x coordinate
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.Y">
            <summary>
            Gets the y coordinate
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.BlockY">
            <summary>
            Gets the player's block y coordinate
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.Horizontal">
            <summary>
            Gets the player's horizontal input
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.Vertical">
            <summary>
            Gets the player's vertical input
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.SpeedX">
            <summary>
            Gets the current speed in the x direction
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.SpeedY">
            <summary>
            Gets the current speed in the y direction
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.ModifierX">
            <summary>
            Gets the current modifier in the x direction
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.ModifierY">
            <summary>
            Gets the current modifier in the y direction
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.LastCheckpoint">
            <summary>
            Gets the last checkpoint
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.Current">
            <summary>
            Gets the current block
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.IsDead">
            <summary>
            Gets whether the player is dead
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.Deaths">
            <summary>
            Gets the amount of deaths the player has
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.SpaceDown">
            <summary>
            Gets whether the player is hoolding down space
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.HasLevitation">
            <summary>
            Gets whether the player has levitation
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.HasProtection">
            <summary>
            Gets whether the player has protection
            </summary>
        </member>
        <member name="P:Fluid.WorldPlayer.SpeedMultiplier">
            <summary>
            Gets the player's speed multiplier
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Unknown">
            <summary>
            Unknown world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Small">
            <summary>
            25x25 Small world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Medium">
            <summary>
            50x50 Medium world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Large">
            <summary>
            100x100 Large world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Massive">
            <summary>
            200x200 Massive world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Wide">
            <summary>
            400x50 Wide world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Great">
            <summary>
            400x200 Great world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.Tall">
            <summary>
            100x400 Tall world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.UltraWide">
            <summary>
            635x50 Ultra wide world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.LowGravity">
            <summary>
            110x110 Low gravity world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.HomeWorld">
            <summary>
            40x30 Home world
            </summary>
        </member>
        <member name="F:Fluid.WorldType.HugeWorld">
            <summary>
            300x300 Huge world
            </summary>
        </member>
    </members>
</doc>
